
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ff8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08002198  08002198  00012198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022a0  080022a0  000122a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080022a4  080022a4  000122a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  20000000  080022a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000080  2000007c  08002324  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000fc  08002324  000200fc  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dd24  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001ea7  00000000  00000000  0002ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000060de  00000000  00000000  0002fc77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000678  00000000  00000000  00035d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000970  00000000  00000000  000363d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00018003  00000000  00000000  00036d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000ba1b  00000000  00000000  0004ed43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00094d0f  00000000  00000000  0005a75e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000ef46d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000018f8  00000000  00000000  000ef4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08002180 	.word	0x08002180

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08002180 	.word	0x08002180

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <BSP_LED_On+0x10>)
 800057a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800057e:	2201      	movs	r2, #1
 8000580:	6840      	ldr	r0, [r0, #4]
 8000582:	2120      	movs	r1, #32
 8000584:	f000 b98e 	b.w	80008a4 <HAL_GPIO_WritePin>
 8000588:	20000000 	.word	0x20000000

0800058c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800058c:	490f      	ldr	r1, [pc, #60]	; (80005cc <SystemInit+0x40>)
 800058e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8000592:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800059a:	4b0d      	ldr	r3, [pc, #52]	; (80005d0 <SystemInit+0x44>)
 800059c:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800059e:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80005a0:	f042 0201 	orr.w	r2, r2, #1
 80005a4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80005a6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80005ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80005b2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <SystemInit+0x48>)
 80005b6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005b8:	681a      	ldr	r2, [r3, #0]
 80005ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80005be:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005c0:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80005c2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80005c6:	608b      	str	r3, [r1, #8]
#endif
}
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00
 80005d0:	40023800 	.word	0x40023800
 80005d4:	24003010 	.word	0x24003010

080005d8 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80005d8:	4770      	bx	lr
	...

080005dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005dc:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005de:	4a0e      	ldr	r2, [pc, #56]	; (8000618 <HAL_InitTick+0x3c>)
 80005e0:	4e0e      	ldr	r6, [pc, #56]	; (800061c <HAL_InitTick+0x40>)
{
 80005e2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e8:	7830      	ldrb	r0, [r6, #0]
 80005ea:	fbb3 f3f0 	udiv	r3, r3, r0
 80005ee:	6810      	ldr	r0, [r2, #0]
 80005f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80005f4:	f000 f878 	bl	80006e8 <HAL_SYSTICK_Config>
 80005f8:	4604      	mov	r4, r0
 80005fa:	b950      	cbnz	r0, 8000612 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005fc:	2d0f      	cmp	r5, #15
 80005fe:	d808      	bhi.n	8000612 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000600:	4602      	mov	r2, r0
 8000602:	4629      	mov	r1, r5
 8000604:	f04f 30ff 	mov.w	r0, #4294967295
 8000608:	f000 f83c 	bl	8000684 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800060c:	6075      	str	r5, [r6, #4]
 800060e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000610:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000612:	2001      	movs	r0, #1
 8000614:	e7fc      	b.n	8000610 <HAL_InitTick+0x34>
 8000616:	bf00      	nop
 8000618:	2000000c 	.word	0x2000000c
 800061c:	20000010 	.word	0x20000010

08000620 <HAL_Init>:
{
 8000620:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000622:	4b0b      	ldr	r3, [pc, #44]	; (8000650 <HAL_Init+0x30>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800062a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000632:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000634:	681a      	ldr	r2, [r3, #0]
 8000636:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800063a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063c:	2003      	movs	r0, #3
 800063e:	f000 f80f 	bl	8000660 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000642:	200f      	movs	r0, #15
 8000644:	f7ff ffca 	bl	80005dc <HAL_InitTick>
  HAL_MspInit();
 8000648:	f7ff ffc6 	bl	80005d8 <HAL_MspInit>
}
 800064c:	2000      	movs	r0, #0
 800064e:	bd08      	pop	{r3, pc}
 8000650:	40023c00 	.word	0x40023c00

08000654 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000654:	4b01      	ldr	r3, [pc, #4]	; (800065c <HAL_GetTick+0x8>)
 8000656:	6818      	ldr	r0, [r3, #0]
}
 8000658:	4770      	bx	lr
 800065a:	bf00      	nop
 800065c:	200000a4 	.word	0x200000a4

08000660 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000660:	4907      	ldr	r1, [pc, #28]	; (8000680 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000662:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000664:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000668:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800066a:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800066c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000670:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000674:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000678:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800067c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800067e:	4770      	bx	lr
 8000680:	e000ed00 	.word	0xe000ed00

08000684 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	68dc      	ldr	r4, [r3, #12]
 800068a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800068e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000692:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000694:	2d04      	cmp	r5, #4
 8000696:	bf28      	it	cs
 8000698:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800069a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006a0:	bf8c      	ite	hi
 80006a2:	3c03      	subhi	r4, #3
 80006a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006a6:	fa03 f505 	lsl.w	r5, r3, r5
 80006aa:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006ae:	40a3      	lsls	r3, r4
 80006b0:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b4:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 80006b6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006b8:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006bc:	bfac      	ite	ge
 80006be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006c2:	4a08      	ldrlt	r2, [pc, #32]	; (80006e4 <HAL_NVIC_SetPriority+0x60>)
 80006c4:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80006c8:	bfb8      	it	lt
 80006ca:	f000 000f 	andlt.w	r0, r0, #15
 80006ce:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d0:	bfaa      	itet	ge
 80006d2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d6:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006d8:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80006dc:	bd30      	pop	{r4, r5, pc}
 80006de:	bf00      	nop
 80006e0:	e000ed00 	.word	0xe000ed00
 80006e4:	e000ed14 	.word	0xe000ed14

080006e8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006e8:	3801      	subs	r0, #1
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d20a      	bcs.n	8000706 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f0:	4b06      	ldr	r3, [pc, #24]	; (800070c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f2:	4a07      	ldr	r2, [pc, #28]	; (8000710 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006f4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	21f0      	movs	r1, #240	; 0xf0
 80006f8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006fc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006fe:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000700:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000702:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000704:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000706:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	e000e010 	.word	0xe000e010
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000714:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000718:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80008a0 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800071c:	4a5e      	ldr	r2, [pc, #376]	; (8000898 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800071e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000720:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 8000722:	2401      	movs	r4, #1
 8000724:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000726:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800072a:	43ac      	bics	r4, r5
 800072c:	f040 80a5 	bne.w	800087a <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000730:	684d      	ldr	r5, [r1, #4]
 8000732:	f005 0403 	and.w	r4, r5, #3
 8000736:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800073a:	2603      	movs	r6, #3
 800073c:	1e67      	subs	r7, r4, #1
 800073e:	fa06 f608 	lsl.w	r6, r6, r8
 8000742:	2f01      	cmp	r7, #1
 8000744:	ea6f 0606 	mvn.w	r6, r6
 8000748:	d834      	bhi.n	80007b4 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 800074a:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800074c:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000750:	68cf      	ldr	r7, [r1, #12]
 8000752:	fa07 f708 	lsl.w	r7, r7, r8
 8000756:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 800075a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800075c:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800075e:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000762:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8000766:	409f      	lsls	r7, r3
 8000768:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800076c:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800076e:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000770:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000774:	688f      	ldr	r7, [r1, #8]
 8000776:	fa07 f708 	lsl.w	r7, r7, r8
 800077a:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800077e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000780:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000782:	d119      	bne.n	80007b8 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000784:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000788:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800078c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000790:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000794:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000798:	f04f 0e0f 	mov.w	lr, #15
 800079c:	fa0e fe0b 	lsl.w	lr, lr, fp
 80007a0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80007a4:	690f      	ldr	r7, [r1, #16]
 80007a6:	fa07 f70b 	lsl.w	r7, r7, fp
 80007aa:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80007ae:	f8ca 7020 	str.w	r7, [sl, #32]
 80007b2:	e001      	b.n	80007b8 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80007b4:	2c03      	cmp	r4, #3
 80007b6:	d1da      	bne.n	800076e <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 80007b8:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007ba:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80007be:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80007c0:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007c2:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80007c6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80007c8:	d057      	beq.n	800087a <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ca:	f04f 0a00 	mov.w	sl, #0
 80007ce:	f8cd a004 	str.w	sl, [sp, #4]
 80007d2:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80007d6:	4c31      	ldr	r4, [pc, #196]	; (800089c <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d8:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 80007dc:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 80007e0:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 80007e4:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 80007e8:	9601      	str	r6, [sp, #4]
 80007ea:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80007ec:	f023 0603 	bic.w	r6, r3, #3
 80007f0:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 80007f4:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80007f8:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80007fc:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000800:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000804:	270f      	movs	r7, #15
 8000806:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800080a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800080c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000810:	d03a      	beq.n	8000888 <HAL_GPIO_Init+0x174>
 8000812:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000816:	42a0      	cmp	r0, r4
 8000818:	d038      	beq.n	800088c <HAL_GPIO_Init+0x178>
 800081a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800081e:	42a0      	cmp	r0, r4
 8000820:	d036      	beq.n	8000890 <HAL_GPIO_Init+0x17c>
 8000822:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000826:	42a0      	cmp	r0, r4
 8000828:	d034      	beq.n	8000894 <HAL_GPIO_Init+0x180>
 800082a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800082e:	42a0      	cmp	r0, r4
 8000830:	bf0c      	ite	eq
 8000832:	2404      	moveq	r4, #4
 8000834:	2407      	movne	r4, #7
 8000836:	fa04 f40e 	lsl.w	r4, r4, lr
 800083a:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800083c:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 800083e:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000840:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000844:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 8000846:	bf54      	ite	pl
 8000848:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800084a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800084e:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 8000850:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000852:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 8000854:	bf54      	ite	pl
 8000856:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000858:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 800085c:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800085e:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000860:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 8000862:	bf54      	ite	pl
 8000864:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000866:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 800086a:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 800086c:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800086e:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 8000870:	bf54      	ite	pl
 8000872:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8000874:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 8000878:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800087a:	3301      	adds	r3, #1
 800087c:	2b10      	cmp	r3, #16
 800087e:	f47f af4f 	bne.w	8000720 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000882:	b003      	add	sp, #12
 8000884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000888:	4654      	mov	r4, sl
 800088a:	e7d4      	b.n	8000836 <HAL_GPIO_Init+0x122>
 800088c:	2401      	movs	r4, #1
 800088e:	e7d2      	b.n	8000836 <HAL_GPIO_Init+0x122>
 8000890:	2402      	movs	r4, #2
 8000892:	e7d0      	b.n	8000836 <HAL_GPIO_Init+0x122>
 8000894:	2403      	movs	r4, #3
 8000896:	e7ce      	b.n	8000836 <HAL_GPIO_Init+0x122>
 8000898:	40013c00 	.word	0x40013c00
 800089c:	40020000 	.word	0x40020000
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a4:	b10a      	cbz	r2, 80008aa <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008a6:	6181      	str	r1, [r0, #24]
  }
}
 80008a8:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80008aa:	0409      	lsls	r1, r1, #16
 80008ac:	e7fb      	b.n	80008a6 <HAL_GPIO_WritePin+0x2>
	...

080008b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008b4:	4604      	mov	r4, r0
 80008b6:	b340      	cbz	r0, 800090a <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008b8:	6803      	ldr	r3, [r0, #0]
 80008ba:	07dd      	lsls	r5, r3, #31
 80008bc:	d410      	bmi.n	80008e0 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	0798      	lsls	r0, r3, #30
 80008c2:	d45e      	bmi.n	8000982 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008c4:	6823      	ldr	r3, [r4, #0]
 80008c6:	071a      	lsls	r2, r3, #28
 80008c8:	f100 80a0 	bmi.w	8000a0c <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	075b      	lsls	r3, r3, #29
 80008d0:	f100 80be 	bmi.w	8000a50 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80008d4:	69a0      	ldr	r0, [r4, #24]
 80008d6:	2800      	cmp	r0, #0
 80008d8:	f040 811f 	bne.w	8000b1a <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80008dc:	2000      	movs	r0, #0
 80008de:	e02b      	b.n	8000938 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008e0:	4ba6      	ldr	r3, [pc, #664]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 80008e2:	689a      	ldr	r2, [r3, #8]
 80008e4:	f002 020c 	and.w	r2, r2, #12
 80008e8:	2a04      	cmp	r2, #4
 80008ea:	d007      	beq.n	80008fc <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008ec:	689a      	ldr	r2, [r3, #8]
 80008ee:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80008f2:	2a08      	cmp	r2, #8
 80008f4:	d10b      	bne.n	800090e <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80008f6:	685a      	ldr	r2, [r3, #4]
 80008f8:	0251      	lsls	r1, r2, #9
 80008fa:	d508      	bpl.n	800090e <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80008fc:	4b9f      	ldr	r3, [pc, #636]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	039a      	lsls	r2, r3, #14
 8000902:	d5dc      	bpl.n	80008be <HAL_RCC_OscConfig+0xe>
 8000904:	6863      	ldr	r3, [r4, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d1d9      	bne.n	80008be <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800090a:	2001      	movs	r0, #1
 800090c:	e014      	b.n	8000938 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800090e:	6862      	ldr	r2, [r4, #4]
 8000910:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000914:	d113      	bne.n	800093e <HAL_RCC_OscConfig+0x8e>
 8000916:	681a      	ldr	r2, [r3, #0]
 8000918:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800091c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800091e:	f7ff fe99 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000922:	4e96      	ldr	r6, [pc, #600]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000924:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000926:	6833      	ldr	r3, [r6, #0]
 8000928:	039b      	lsls	r3, r3, #14
 800092a:	d4c8      	bmi.n	80008be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800092c:	f7ff fe92 	bl	8000654 <HAL_GetTick>
 8000930:	1b40      	subs	r0, r0, r5
 8000932:	2864      	cmp	r0, #100	; 0x64
 8000934:	d9f7      	bls.n	8000926 <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 8000936:	2003      	movs	r0, #3
}
 8000938:	b002      	add	sp, #8
 800093a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800093e:	4d8f      	ldr	r5, [pc, #572]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000940:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000944:	682b      	ldr	r3, [r5, #0]
 8000946:	d107      	bne.n	8000958 <HAL_RCC_OscConfig+0xa8>
 8000948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800094c:	602b      	str	r3, [r5, #0]
 800094e:	682b      	ldr	r3, [r5, #0]
 8000950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000954:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000956:	e7e2      	b.n	800091e <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000958:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800095c:	602b      	str	r3, [r5, #0]
 800095e:	682b      	ldr	r3, [r5, #0]
 8000960:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000964:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000966:	2a00      	cmp	r2, #0
 8000968:	d1d9      	bne.n	800091e <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 800096a:	f7ff fe73 	bl	8000654 <HAL_GetTick>
 800096e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000970:	682b      	ldr	r3, [r5, #0]
 8000972:	039f      	lsls	r7, r3, #14
 8000974:	d5a3      	bpl.n	80008be <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000976:	f7ff fe6d 	bl	8000654 <HAL_GetTick>
 800097a:	1b80      	subs	r0, r0, r6
 800097c:	2864      	cmp	r0, #100	; 0x64
 800097e:	d9f7      	bls.n	8000970 <HAL_RCC_OscConfig+0xc0>
 8000980:	e7d9      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000982:	4b7e      	ldr	r3, [pc, #504]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000984:	689a      	ldr	r2, [r3, #8]
 8000986:	f012 0f0c 	tst.w	r2, #12
 800098a:	d007      	beq.n	800099c <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800098c:	689a      	ldr	r2, [r3, #8]
 800098e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000992:	2a08      	cmp	r2, #8
 8000994:	d111      	bne.n	80009ba <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000996:	685b      	ldr	r3, [r3, #4]
 8000998:	025e      	lsls	r6, r3, #9
 800099a:	d40e      	bmi.n	80009ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800099c:	4b77      	ldr	r3, [pc, #476]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 800099e:	681a      	ldr	r2, [r3, #0]
 80009a0:	0795      	lsls	r5, r2, #30
 80009a2:	d502      	bpl.n	80009aa <HAL_RCC_OscConfig+0xfa>
 80009a4:	68e2      	ldr	r2, [r4, #12]
 80009a6:	2a01      	cmp	r2, #1
 80009a8:	d1af      	bne.n	800090a <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	6921      	ldr	r1, [r4, #16]
 80009ae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80009b2:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 80009b6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80009b8:	e784      	b.n	80008c4 <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80009ba:	68e2      	ldr	r2, [r4, #12]
 80009bc:	4b70      	ldr	r3, [pc, #448]	; (8000b80 <HAL_RCC_OscConfig+0x2d0>)
 80009be:	b1b2      	cbz	r2, 80009ee <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 80009c0:	2201      	movs	r2, #1
 80009c2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c4:	f7ff fe46 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009c8:	4d6c      	ldr	r5, [pc, #432]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80009ca:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80009cc:	682b      	ldr	r3, [r5, #0]
 80009ce:	0798      	lsls	r0, r3, #30
 80009d0:	d507      	bpl.n	80009e2 <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80009d2:	682b      	ldr	r3, [r5, #0]
 80009d4:	6922      	ldr	r2, [r4, #16]
 80009d6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80009da:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80009de:	602b      	str	r3, [r5, #0]
 80009e0:	e770      	b.n	80008c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009e2:	f7ff fe37 	bl	8000654 <HAL_GetTick>
 80009e6:	1b80      	subs	r0, r0, r6
 80009e8:	2802      	cmp	r0, #2
 80009ea:	d9ef      	bls.n	80009cc <HAL_RCC_OscConfig+0x11c>
 80009ec:	e7a3      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 80009ee:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009f0:	f7ff fe30 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f4:	4e61      	ldr	r6, [pc, #388]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80009f6:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80009f8:	6833      	ldr	r3, [r6, #0]
 80009fa:	0799      	lsls	r1, r3, #30
 80009fc:	f57f af62 	bpl.w	80008c4 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a00:	f7ff fe28 	bl	8000654 <HAL_GetTick>
 8000a04:	1b40      	subs	r0, r0, r5
 8000a06:	2802      	cmp	r0, #2
 8000a08:	d9f6      	bls.n	80009f8 <HAL_RCC_OscConfig+0x148>
 8000a0a:	e794      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000a0c:	6962      	ldr	r2, [r4, #20]
 8000a0e:	4b5d      	ldr	r3, [pc, #372]	; (8000b84 <HAL_RCC_OscConfig+0x2d4>)
 8000a10:	b17a      	cbz	r2, 8000a32 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 8000a12:	2201      	movs	r2, #1
 8000a14:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a16:	f7ff fe1d 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a1a:	4e58      	ldr	r6, [pc, #352]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000a1c:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000a1e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000a20:	079f      	lsls	r7, r3, #30
 8000a22:	f53f af53 	bmi.w	80008cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a26:	f7ff fe15 	bl	8000654 <HAL_GetTick>
 8000a2a:	1b40      	subs	r0, r0, r5
 8000a2c:	2802      	cmp	r0, #2
 8000a2e:	d9f6      	bls.n	8000a1e <HAL_RCC_OscConfig+0x16e>
 8000a30:	e781      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 8000a32:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000a34:	f7ff fe0e 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a38:	4e50      	ldr	r6, [pc, #320]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000a3a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000a3c:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8000a3e:	0798      	lsls	r0, r3, #30
 8000a40:	f57f af44 	bpl.w	80008cc <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000a44:	f7ff fe06 	bl	8000654 <HAL_GetTick>
 8000a48:	1b40      	subs	r0, r0, r5
 8000a4a:	2802      	cmp	r0, #2
 8000a4c:	d9f6      	bls.n	8000a3c <HAL_RCC_OscConfig+0x18c>
 8000a4e:	e772      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000a50:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000a52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a54:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8000a58:	d128      	bne.n	8000aac <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	9201      	str	r2, [sp, #4]
 8000a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a62:	641a      	str	r2, [r3, #64]	; 0x40
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6a:	9301      	str	r3, [sp, #4]
 8000a6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000a6e:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a70:	4d45      	ldr	r5, [pc, #276]	; (8000b88 <HAL_RCC_OscConfig+0x2d8>)
 8000a72:	682b      	ldr	r3, [r5, #0]
 8000a74:	05d9      	lsls	r1, r3, #23
 8000a76:	d51b      	bpl.n	8000ab0 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a78:	68a3      	ldr	r3, [r4, #8]
 8000a7a:	4d40      	ldr	r5, [pc, #256]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d127      	bne.n	8000ad0 <HAL_RCC_OscConfig+0x220>
 8000a80:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a88:	f7ff fde4 	bl	8000654 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a8c:	4e3b      	ldr	r6, [pc, #236]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000a8e:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a90:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a94:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a96:	079b      	lsls	r3, r3, #30
 8000a98:	d539      	bpl.n	8000b0e <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8000a9a:	2f00      	cmp	r7, #0
 8000a9c:	f43f af1a 	beq.w	80008d4 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000aa2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aaa:	e713      	b.n	80008d4 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000aac:	2700      	movs	r7, #0
 8000aae:	e7df      	b.n	8000a70 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ab6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000ab8:	f7ff fdcc 	bl	8000654 <HAL_GetTick>
 8000abc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	05da      	lsls	r2, r3, #23
 8000ac2:	d4d9      	bmi.n	8000a78 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ac4:	f7ff fdc6 	bl	8000654 <HAL_GetTick>
 8000ac8:	1b80      	subs	r0, r0, r6
 8000aca:	2802      	cmp	r0, #2
 8000acc:	d9f7      	bls.n	8000abe <HAL_RCC_OscConfig+0x20e>
 8000ace:	e732      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ad0:	2b05      	cmp	r3, #5
 8000ad2:	d104      	bne.n	8000ade <HAL_RCC_OscConfig+0x22e>
 8000ad4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000ad6:	f043 0304 	orr.w	r3, r3, #4
 8000ada:	672b      	str	r3, [r5, #112]	; 0x70
 8000adc:	e7d0      	b.n	8000a80 <HAL_RCC_OscConfig+0x1d0>
 8000ade:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ae0:	f022 0201 	bic.w	r2, r2, #1
 8000ae4:	672a      	str	r2, [r5, #112]	; 0x70
 8000ae6:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000ae8:	f022 0204 	bic.w	r2, r2, #4
 8000aec:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1ca      	bne.n	8000a88 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000af2:	f7ff fdaf 	bl	8000654 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000af6:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000afa:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000afc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000afe:	0798      	lsls	r0, r3, #30
 8000b00:	d5cb      	bpl.n	8000a9a <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b02:	f7ff fda7 	bl	8000654 <HAL_GetTick>
 8000b06:	1b80      	subs	r0, r0, r6
 8000b08:	4540      	cmp	r0, r8
 8000b0a:	d9f7      	bls.n	8000afc <HAL_RCC_OscConfig+0x24c>
 8000b0c:	e713      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b0e:	f7ff fda1 	bl	8000654 <HAL_GetTick>
 8000b12:	1b40      	subs	r0, r0, r5
 8000b14:	4540      	cmp	r0, r8
 8000b16:	d9bd      	bls.n	8000a94 <HAL_RCC_OscConfig+0x1e4>
 8000b18:	e70d      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000b1a:	4d18      	ldr	r5, [pc, #96]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
 8000b1c:	68ab      	ldr	r3, [r5, #8]
 8000b1e:	f003 030c 	and.w	r3, r3, #12
 8000b22:	2b08      	cmp	r3, #8
 8000b24:	d047      	beq.n	8000bb6 <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b26:	4e19      	ldr	r6, [pc, #100]	; (8000b8c <HAL_RCC_OscConfig+0x2dc>)
 8000b28:	2300      	movs	r3, #0
 8000b2a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000b2c:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b2e:	d135      	bne.n	8000b9c <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000b30:	f7ff fd90 	bl	8000654 <HAL_GetTick>
 8000b34:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b36:	682b      	ldr	r3, [r5, #0]
 8000b38:	0199      	lsls	r1, r3, #6
 8000b3a:	d429      	bmi.n	8000b90 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000b3c:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000b44:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000b48:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b4a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000b4e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b50:	0852      	lsrs	r2, r2, #1
 8000b52:	3a01      	subs	r2, #1
 8000b54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b58:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000b5e:	f7ff fd79 	bl	8000654 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b62:	4d06      	ldr	r5, [pc, #24]	; (8000b7c <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000b64:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000b66:	682b      	ldr	r3, [r5, #0]
 8000b68:	019a      	lsls	r2, r3, #6
 8000b6a:	f53f aeb7 	bmi.w	80008dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6e:	f7ff fd71 	bl	8000654 <HAL_GetTick>
 8000b72:	1b00      	subs	r0, r0, r4
 8000b74:	2802      	cmp	r0, #2
 8000b76:	d9f6      	bls.n	8000b66 <HAL_RCC_OscConfig+0x2b6>
 8000b78:	e6dd      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	42470000 	.word	0x42470000
 8000b84:	42470e80 	.word	0x42470e80
 8000b88:	40007000 	.word	0x40007000
 8000b8c:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b90:	f7ff fd60 	bl	8000654 <HAL_GetTick>
 8000b94:	1bc0      	subs	r0, r0, r7
 8000b96:	2802      	cmp	r0, #2
 8000b98:	d9cd      	bls.n	8000b36 <HAL_RCC_OscConfig+0x286>
 8000b9a:	e6cc      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000b9c:	f7ff fd5a 	bl	8000654 <HAL_GetTick>
 8000ba0:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ba2:	682b      	ldr	r3, [r5, #0]
 8000ba4:	019b      	lsls	r3, r3, #6
 8000ba6:	f57f ae99 	bpl.w	80008dc <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000baa:	f7ff fd53 	bl	8000654 <HAL_GetTick>
 8000bae:	1b00      	subs	r0, r0, r4
 8000bb0:	2802      	cmp	r0, #2
 8000bb2:	d9f6      	bls.n	8000ba2 <HAL_RCC_OscConfig+0x2f2>
 8000bb4:	e6bf      	b.n	8000936 <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bb6:	2801      	cmp	r0, #1
 8000bb8:	f43f aebe 	beq.w	8000938 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000bbc:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000bbe:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bc0:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000bc4:	4291      	cmp	r1, r2
 8000bc6:	f47f aea0 	bne.w	800090a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bca:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000bcc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000bd0:	428a      	cmp	r2, r1
 8000bd2:	f47f ae9a 	bne.w	800090a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000bd6:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000bd8:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000bdc:	401a      	ands	r2, r3
 8000bde:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000be2:	f47f ae92 	bne.w	800090a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000be6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000be8:	0852      	lsrs	r2, r2, #1
 8000bea:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000bee:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000bf0:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000bf4:	f47f ae89 	bne.w	800090a <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000bf8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000bfa:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000bfe:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000c02:	f43f ae6b 	beq.w	80008dc <HAL_RCC_OscConfig+0x2c>
 8000c06:	e680      	b.n	800090a <HAL_RCC_OscConfig+0x5a>

08000c08 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c08:	4913      	ldr	r1, [pc, #76]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000c0a:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c0c:	688b      	ldr	r3, [r1, #8]
 8000c0e:	f003 030c 	and.w	r3, r3, #12
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	d01c      	beq.n	8000c50 <HAL_RCC_GetSysClockFreq+0x48>
 8000c16:	2b08      	cmp	r3, #8
 8000c18:	d11c      	bne.n	8000c54 <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c1a:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c1c:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c1e:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000c20:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c24:	bf14      	ite	ne
 8000c26:	480d      	ldrne	r0, [pc, #52]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c28:	480d      	ldreq	r0, [pc, #52]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c2a:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000c2e:	bf18      	it	ne
 8000c30:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000c32:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000c36:	fba1 0100 	umull	r0, r1, r1, r0
 8000c3a:	f7ff fb21 	bl	8000280 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_RCC_GetSysClockFreq+0x50>)
 8000c40:	685b      	ldr	r3, [r3, #4]
 8000c42:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000c46:	3301      	adds	r3, #1
 8000c48:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000c4a:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000c4e:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <HAL_RCC_GetSysClockFreq+0x54>)
 8000c52:	e7fc      	b.n	8000c4e <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000c54:	4802      	ldr	r0, [pc, #8]	; (8000c60 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000c56:	e7fa      	b.n	8000c4e <HAL_RCC_GetSysClockFreq+0x46>
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	007a1200 	.word	0x007a1200
 8000c60:	00f42400 	.word	0x00f42400

08000c64 <HAL_RCC_ClockConfig>:
{
 8000c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c68:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	b910      	cbnz	r0, 8000c74 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000c6e:	2001      	movs	r0, #1
}
 8000c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c74:	4b44      	ldr	r3, [pc, #272]	; (8000d88 <HAL_RCC_ClockConfig+0x124>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	f002 0207 	and.w	r2, r2, #7
 8000c7c:	428a      	cmp	r2, r1
 8000c7e:	d328      	bcc.n	8000cd2 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c80:	6822      	ldr	r2, [r4, #0]
 8000c82:	0797      	lsls	r7, r2, #30
 8000c84:	d42d      	bmi.n	8000ce2 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c86:	07d0      	lsls	r0, r2, #31
 8000c88:	d441      	bmi.n	8000d0e <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c8a:	4b3f      	ldr	r3, [pc, #252]	; (8000d88 <HAL_RCC_ClockConfig+0x124>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	f002 0207 	and.w	r2, r2, #7
 8000c92:	42aa      	cmp	r2, r5
 8000c94:	d866      	bhi.n	8000d64 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c96:	6822      	ldr	r2, [r4, #0]
 8000c98:	0751      	lsls	r1, r2, #29
 8000c9a:	d46c      	bmi.n	8000d76 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c9c:	0713      	lsls	r3, r2, #28
 8000c9e:	d507      	bpl.n	8000cb0 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000ca0:	4a3a      	ldr	r2, [pc, #232]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000ca2:	6921      	ldr	r1, [r4, #16]
 8000ca4:	6893      	ldr	r3, [r2, #8]
 8000ca6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000caa:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000cae:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000cb0:	f7ff ffaa 	bl	8000c08 <HAL_RCC_GetSysClockFreq>
 8000cb4:	4b35      	ldr	r3, [pc, #212]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000cb6:	4a36      	ldr	r2, [pc, #216]	; (8000d90 <HAL_RCC_ClockConfig+0x12c>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000cbe:	5cd3      	ldrb	r3, [r2, r3]
 8000cc0:	40d8      	lsrs	r0, r3
 8000cc2:	4b34      	ldr	r3, [pc, #208]	; (8000d94 <HAL_RCC_ClockConfig+0x130>)
 8000cc4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000cc6:	4b34      	ldr	r3, [pc, #208]	; (8000d98 <HAL_RCC_ClockConfig+0x134>)
 8000cc8:	6818      	ldr	r0, [r3, #0]
 8000cca:	f7ff fc87 	bl	80005dc <HAL_InitTick>
  return HAL_OK;
 8000cce:	2000      	movs	r0, #0
 8000cd0:	e7ce      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cd2:	b2ca      	uxtb	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	428b      	cmp	r3, r1
 8000cde:	d1c6      	bne.n	8000c6e <HAL_RCC_ClockConfig+0xa>
 8000ce0:	e7ce      	b.n	8000c80 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000ce4:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000ce8:	bf1e      	ittt	ne
 8000cea:	6899      	ldrne	r1, [r3, #8]
 8000cec:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000cf0:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000cf2:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000cf4:	bf42      	ittt	mi
 8000cf6:	6899      	ldrmi	r1, [r3, #8]
 8000cf8:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000cfc:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cfe:	4923      	ldr	r1, [pc, #140]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000d00:	68a0      	ldr	r0, [r4, #8]
 8000d02:	688b      	ldr	r3, [r1, #8]
 8000d04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000d08:	4303      	orrs	r3, r0
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	e7bb      	b.n	8000c86 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d0e:	6862      	ldr	r2, [r4, #4]
 8000d10:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000d12:	2a01      	cmp	r2, #1
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	d0a7      	beq.n	8000c6e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1e:	4e1b      	ldr	r6, [pc, #108]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000d20:	68b3      	ldr	r3, [r6, #8]
 8000d22:	f023 0303 	bic.w	r3, r3, #3
 8000d26:	4313      	orrs	r3, r2
 8000d28:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000d2a:	f7ff fc93 	bl	8000654 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d2e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000d32:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d34:	68b3      	ldr	r3, [r6, #8]
 8000d36:	6862      	ldr	r2, [r4, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000d40:	d0a3      	beq.n	8000c8a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d42:	f7ff fc87 	bl	8000654 <HAL_GetTick>
 8000d46:	1bc0      	subs	r0, r0, r7
 8000d48:	4540      	cmp	r0, r8
 8000d4a:	d9f3      	bls.n	8000d34 <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	e78f      	b.n	8000c70 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d50:	1e91      	subs	r1, r2, #2
 8000d52:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d54:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000d56:	d802      	bhi.n	8000d5e <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d58:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000d5c:	e7de      	b.n	8000d1c <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d5e:	f013 0f02 	tst.w	r3, #2
 8000d62:	e7db      	b.n	8000d1c <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d64:	b2ea      	uxtb	r2, r5
 8000d66:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f003 0307 	and.w	r3, r3, #7
 8000d6e:	42ab      	cmp	r3, r5
 8000d70:	f47f af7d 	bne.w	8000c6e <HAL_RCC_ClockConfig+0xa>
 8000d74:	e78f      	b.n	8000c96 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000d76:	4905      	ldr	r1, [pc, #20]	; (8000d8c <HAL_RCC_ClockConfig+0x128>)
 8000d78:	68e0      	ldr	r0, [r4, #12]
 8000d7a:	688b      	ldr	r3, [r1, #8]
 8000d7c:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d80:	4303      	orrs	r3, r0
 8000d82:	608b      	str	r3, [r1, #8]
 8000d84:	e78a      	b.n	8000c9c <HAL_RCC_ClockConfig+0x38>
 8000d86:	bf00      	nop
 8000d88:	40023c00 	.word	0x40023c00
 8000d8c:	40023800 	.word	0x40023800
 8000d90:	08002198 	.word	0x08002198
 8000d94:	2000000c 	.word	0x2000000c
 8000d98:	20000014 	.word	0x20000014

08000d9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <HAL_RCC_GetPCLK1Freq+0x14>)
 8000d9e:	4a05      	ldr	r2, [pc, #20]	; (8000db4 <HAL_RCC_GetPCLK1Freq+0x18>)
 8000da0:	689b      	ldr	r3, [r3, #8]
 8000da2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8000da6:	5cd3      	ldrb	r3, [r2, r3]
 8000da8:	4a03      	ldr	r2, [pc, #12]	; (8000db8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8000daa:	6810      	ldr	r0, [r2, #0]
}
 8000dac:	40d8      	lsrs	r0, r3
 8000dae:	4770      	bx	lr
 8000db0:	40023800 	.word	0x40023800
 8000db4:	080021a8 	.word	0x080021a8
 8000db8:	2000000c 	.word	0x2000000c

08000dbc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000dbe:	4a05      	ldr	r2, [pc, #20]	; (8000dd4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000dc0:	689b      	ldr	r3, [r3, #8]
 8000dc2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8000dc6:	5cd3      	ldrb	r3, [r2, r3]
 8000dc8:	4a03      	ldr	r2, [pc, #12]	; (8000dd8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000dca:	6810      	ldr	r0, [r2, #0]
}
 8000dcc:	40d8      	lsrs	r0, r3
 8000dce:	4770      	bx	lr
 8000dd0:	40023800 	.word	0x40023800
 8000dd4:	080021a8 	.word	0x080021a8
 8000dd8:	2000000c 	.word	0x2000000c

08000ddc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000ddc:	6802      	ldr	r2, [r0, #0]
 8000dde:	68c1      	ldr	r1, [r0, #12]
{
 8000de0:	b538      	push	{r3, r4, r5, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000de2:	6913      	ldr	r3, [r2, #16]
 8000de4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000de8:	430b      	orrs	r3, r1
 8000dea:	6113      	str	r3, [r2, #16]
{
 8000dec:	4605      	mov	r5, r0
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000dee:	6883      	ldr	r3, [r0, #8]
 8000df0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8000df2:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000df4:	4303      	orrs	r3, r0
 8000df6:	6968      	ldr	r0, [r5, #20]
 8000df8:	4303      	orrs	r3, r0
 8000dfa:	69e8      	ldr	r0, [r5, #28]
  MODIFY_REG(huart->Instance->CR1,
 8000dfc:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 8000e00:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8000e04:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8000e06:	430b      	orrs	r3, r1
 8000e08:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8000e0a:	6953      	ldr	r3, [r2, #20]
 8000e0c:	69a9      	ldr	r1, [r5, #24]
 8000e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000e12:	430b      	orrs	r3, r1
 8000e14:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <UART_SetConfig+0xb8>)
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d003      	beq.n	8000e24 <UART_SetConfig+0x48>
 8000e1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d124      	bne.n	8000e6e <UART_SetConfig+0x92>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8000e24:	f7ff ffca 	bl	8000dbc <HAL_RCC_GetPCLK2Freq>
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e28:	69ea      	ldr	r2, [r5, #28]
 8000e2a:	2319      	movs	r3, #25
 8000e2c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e30:	fba0 0103 	umull	r0, r1, r0, r3
 8000e34:	e9d5 4300 	ldrd	r4, r3, [r5]
 8000e38:	d11c      	bne.n	8000e74 <UART_SetConfig+0x98>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	1892      	adds	r2, r2, r2
 8000e3e:	f04f 0300 	mov.w	r3, #0
 8000e42:	415b      	adcs	r3, r3
 8000e44:	f7ff fa1c 	bl	8000280 <__aeabi_uldivmod>
 8000e48:	2164      	movs	r1, #100	; 0x64
 8000e4a:	fbb0 f5f1 	udiv	r5, r0, r1
 8000e4e:	fb01 0315 	mls	r3, r1, r5, r0
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	3332      	adds	r3, #50	; 0x32
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	f003 0207 	and.w	r2, r3, #7
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	eb02 1205 	add.w	r2, r2, r5, lsl #4
 8000e64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8000e68:	4413      	add	r3, r2
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e6a:	60a3      	str	r3, [r4, #8]
  }
}
 8000e6c:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK1Freq();
 8000e6e:	f7ff ff95 	bl	8000d9c <HAL_RCC_GetPCLK1Freq>
 8000e72:	e7d9      	b.n	8000e28 <UART_SetConfig+0x4c>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8000e74:	009a      	lsls	r2, r3, #2
 8000e76:	0f9b      	lsrs	r3, r3, #30
 8000e78:	f7ff fa02 	bl	8000280 <__aeabi_uldivmod>
 8000e7c:	2264      	movs	r2, #100	; 0x64
 8000e7e:	fbb0 f1f2 	udiv	r1, r0, r2
 8000e82:	fb02 0311 	mls	r3, r2, r1, r0
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	3332      	adds	r3, #50	; 0x32
 8000e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e8e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8000e92:	e7ea      	b.n	8000e6a <UART_SetConfig+0x8e>
 8000e94:	40011000 	.word	0x40011000

08000e98 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
 8000e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9a:	4604      	mov	r4, r0
 8000e9c:	460e      	mov	r6, r1
 8000e9e:	4617      	mov	r7, r2
 8000ea0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ea2:	6822      	ldr	r2, [r4, #0]
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	ea36 0303 	bics.w	r3, r6, r3
 8000eaa:	d101      	bne.n	8000eb0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8000eac:	2000      	movs	r0, #0
 8000eae:	e028      	b.n	8000f02 <UART_WaitOnFlagUntilTimeout.constprop.0+0x6a>
    if (Timeout != HAL_MAX_DELAY)
 8000eb0:	1c6b      	adds	r3, r5, #1
 8000eb2:	d0f7      	beq.n	8000ea4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000eb4:	b125      	cbz	r5, 8000ec0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
 8000eb6:	f7ff fbcd 	bl	8000654 <HAL_GetTick>
 8000eba:	1bc0      	subs	r0, r0, r7
 8000ebc:	4285      	cmp	r5, r0
 8000ebe:	d2f0      	bcs.n	8000ea2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ec0:	6822      	ldr	r2, [r4, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000ec2:	f102 030c 	add.w	r3, r2, #12
 8000ec6:	e853 3f00 	ldrex	r3, [r3]
 8000eca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ece:	320c      	adds	r2, #12
 8000ed0:	e842 3000 	strex	r0, r3, [r2]
   return(result);
 8000ed4:	6821      	ldr	r1, [r4, #0]
 8000ed6:	2800      	cmp	r0, #0
 8000ed8:	d1f2      	bne.n	8000ec0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x28>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000eda:	f101 0314 	add.w	r3, r1, #20
 8000ede:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ee2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000ee6:	f101 0014 	add.w	r0, r1, #20
 8000eea:	e840 3200 	strex	r2, r3, [r0]
 8000eee:	2a00      	cmp	r2, #0
 8000ef0:	d1f3      	bne.n	8000eda <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
        huart->gState  = HAL_UART_STATE_READY;
 8000ef2:	2320      	movs	r3, #32
 8000ef4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        __HAL_UNLOCK(huart);
 8000ef8:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        huart->RxState = HAL_UART_STATE_READY;
 8000efc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8000f00:	2003      	movs	r0, #3
}
 8000f02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000f04 <HAL_UART_Init>:
{
 8000f04:	b510      	push	{r4, lr}
  if (huart == NULL)
 8000f06:	4604      	mov	r4, r0
 8000f08:	b340      	cbz	r0, 8000f5c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8000f0a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000f0e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f12:	b91b      	cbnz	r3, 8000f1c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f14:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8000f18:	f000 f91e 	bl	8001158 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f1c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f1e:	2324      	movs	r3, #36	; 0x24
 8000f20:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8000f24:	68d3      	ldr	r3, [r2, #12]
 8000f26:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000f2a:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	f7ff ff55 	bl	8000ddc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f32:	6823      	ldr	r3, [r4, #0]
 8000f34:	691a      	ldr	r2, [r3, #16]
 8000f36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000f3a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000f42:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8000f44:	68da      	ldr	r2, [r3, #12]
 8000f46:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f4a:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f4c:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8000f4e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f50:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8000f52:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8000f56:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8000f5a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f5c:	2001      	movs	r0, #1
 8000f5e:	e7fc      	b.n	8000f5a <HAL_UART_Init+0x56>

08000f60 <HAL_UART_Transmit>:
{
 8000f60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f62:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8000f64:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
{
 8000f68:	9300      	str	r3, [sp, #0]
  if (huart->gState == HAL_UART_STATE_READY)
 8000f6a:	2a20      	cmp	r2, #32
{
 8000f6c:	4604      	mov	r4, r0
 8000f6e:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8000f70:	d149      	bne.n	8001006 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8000f72:	2900      	cmp	r1, #0
 8000f74:	d045      	beq.n	8001002 <HAL_UART_Transmit+0xa2>
 8000f76:	2f00      	cmp	r7, #0
 8000f78:	d043      	beq.n	8001002 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8000f7a:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 8000f7e:	2a01      	cmp	r2, #1
 8000f80:	d041      	beq.n	8001006 <HAL_UART_Transmit+0xa6>
 8000f82:	2201      	movs	r2, #1
 8000f84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f88:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f8a:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f8c:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f8e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8000f92:	f7ff fb5f 	bl	8000654 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f96:	68a1      	ldr	r1, [r4, #8]
 8000f98:	9b00      	ldr	r3, [sp, #0]
    huart->TxXferSize = Size;
 8000f9a:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000f9c:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8000fa0:	4602      	mov	r2, r0
    huart->TxXferCount = Size;
 8000fa2:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000fa4:	d103      	bne.n	8000fae <HAL_UART_Transmit+0x4e>
 8000fa6:	6921      	ldr	r1, [r4, #16]
 8000fa8:	b909      	cbnz	r1, 8000fae <HAL_UART_Transmit+0x4e>
 8000faa:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8000fac:	460e      	mov	r6, r1
    __HAL_UNLOCK(huart);
 8000fae:	2100      	movs	r1, #0
 8000fb0:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8000fb4:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8000fb6:	b289      	uxth	r1, r1
 8000fb8:	b941      	cbnz	r1, 8000fcc <HAL_UART_Transmit+0x6c>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000fba:	2140      	movs	r1, #64	; 0x40
 8000fbc:	4620      	mov	r0, r4
 8000fbe:	f7ff ff6b 	bl	8000e98 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8000fc2:	b960      	cbnz	r0, 8000fde <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8000fc4:	2320      	movs	r3, #32
 8000fc6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8000fca:	e009      	b.n	8000fe0 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fcc:	2180      	movs	r1, #128	; 0x80
 8000fce:	4620      	mov	r0, r4
 8000fd0:	e9cd 2300 	strd	r2, r3, [sp]
 8000fd4:	f7ff ff60 	bl	8000e98 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8000fd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8000fdc:	b110      	cbz	r0, 8000fe4 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8000fde:	2003      	movs	r0, #3
}
 8000fe0:	b003      	add	sp, #12
 8000fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8000fe4:	6820      	ldr	r0, [r4, #0]
 8000fe6:	b94e      	cbnz	r6, 8000ffc <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8000fe8:	f835 1b02 	ldrh.w	r1, [r5], #2
 8000fec:	f3c1 0108 	ubfx	r1, r1, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ff0:	6041      	str	r1, [r0, #4]
      huart->TxXferCount--;
 8000ff2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8000ff4:	3901      	subs	r1, #1
 8000ff6:	b289      	uxth	r1, r1
 8000ff8:	84e1      	strh	r1, [r4, #38]	; 0x26
 8000ffa:	e7db      	b.n	8000fb4 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8000ffc:	f816 1b01 	ldrb.w	r1, [r6], #1
 8001000:	e7f6      	b.n	8000ff0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8001002:	2001      	movs	r0, #1
 8001004:	e7ec      	b.n	8000fe0 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8001006:	2002      	movs	r0, #2
 8001008:	e7ea      	b.n	8000fe0 <HAL_UART_Transmit+0x80>
	...

0800100c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800100c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001044 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001010:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001012:	e003      	b.n	800101c <LoopCopyDataInit>

08001014 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001016:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001018:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800101a:	3104      	adds	r1, #4

0800101c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800101e:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001020:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001022:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001024:	d3f6      	bcc.n	8001014 <CopyDataInit>
  ldr  r2, =_sbss
 8001026:	4a0b      	ldr	r2, [pc, #44]	; (8001054 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001028:	e002      	b.n	8001030 <LoopFillZerobss>

0800102a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800102a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800102c:	f842 3b04 	str.w	r3, [r2], #4

08001030 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001032:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001034:	d3f9      	bcc.n	800102a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001036:	f7ff faa9 	bl	800058c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800103a:	f000 f91f 	bl	800127c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800103e:	f000 f80f 	bl	8001060 <main>
  bx  lr    
 8001042:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001044:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001048:	080022a8 	.word	0x080022a8
  ldr  r0, =_sdata
 800104c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001050:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001054:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001058:	200000fc 	.word	0x200000fc

0800105c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800105c:	e7fe      	b.n	800105c <ADC_IRQHandler>
	...

08001060 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8001060:	b500      	push	{lr}
 8001062:	b095      	sub	sp, #84	; 0x54
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8001064:	f7ff fadc 	bl	8000620 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001068:	2600      	movs	r6, #0
 800106a:	4b2e      	ldr	r3, [pc, #184]	; (8001124 <main+0xc4>)
 800106c:	9601      	str	r6, [sp, #4]
 800106e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001070:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001074:	641a      	str	r2, [r3, #64]	; 0x40
 8001076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001078:	4a2b      	ldr	r2, [pc, #172]	; (8001128 <main+0xc8>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001082:	9602      	str	r6, [sp, #8]
 8001084:	6813      	ldr	r3, [r2, #0]
 8001086:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800108a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	6813      	ldr	r3, [r2, #0]
 8001092:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001096:	9302      	str	r3, [sp, #8]
 8001098:	9b02      	ldr	r3, [sp, #8]
  
  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 800109a:	2101      	movs	r1, #1
 800109c:	2310      	movs	r3, #16
 800109e:	e9cd 130b 	strd	r1, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010a2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010a4:	f44f 70a8 	mov.w	r0, #336	; 0x150
 80010a8:	2304      	movs	r3, #4
 80010aa:	e9cd 0311 	strd	r0, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010ae:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010b0:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	e9cd 460e 	strd	r4, r6, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b8:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010ba:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010bc:	f7ff fbf8 	bl	80008b0 <HAL_RCC_OscConfig>
 80010c0:	4605      	mov	r5, r0
 80010c2:	b118      	cbz	r0, 80010cc <main+0x6c>
  * @retval None
  */
static void Error_Handler(void)
{
  /* Turn LED2 on */
  BSP_LED_On(LED2);
 80010c4:	4630      	mov	r0, r6
 80010c6:	f7ff fa57 	bl	8000578 <BSP_LED_On>
  while(1)
 80010ca:	e7fe      	b.n	80010ca <main+0x6a>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 80010cc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	e9cd 3403 	strd	r3, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 80010d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 80010d6:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010da:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010dc:	4621      	mov	r1, r4
 80010de:	a803      	add	r0, sp, #12
 80010e0:	f7ff fdc0 	bl	8000c64 <HAL_RCC_ClockConfig>
 80010e4:	4604      	mov	r4, r0
 80010e6:	b118      	cbz	r0, 80010f0 <main+0x90>
  BSP_LED_On(LED2);
 80010e8:	4628      	mov	r0, r5
 80010ea:	f7ff fa45 	bl	8000578 <BSP_LED_On>
  while(1)
 80010ee:	e7fe      	b.n	80010ee <main+0x8e>
  UartHandle.Instance          = USARTx;
 80010f0:	480e      	ldr	r0, [pc, #56]	; (800112c <main+0xcc>)
  UartHandle.Init.BaudRate     = 9600;
 80010f2:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <main+0xd0>)
  UartHandle.Init.HwFlowCtl    = UART_HWCONTROL_NONE;
 80010f4:	6184      	str	r4, [r0, #24]
  UartHandle.Init.BaudRate     = 9600;
 80010f6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80010fa:	e9c0 2300 	strd	r2, r3, [r0]
  UartHandle.Init.Parity       = UART_PARITY_ODD;
 80010fe:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001102:	6103      	str	r3, [r0, #16]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 8001104:	230c      	movs	r3, #12
  UartHandle.Init.StopBits     = UART_STOPBITS_1;
 8001106:	e9c0 4402 	strd	r4, r4, [r0, #8]
  UartHandle.Init.Mode         = UART_MODE_TX_RX;
 800110a:	6143      	str	r3, [r0, #20]
  UartHandle.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	61c4      	str	r4, [r0, #28]
  if(HAL_UART_Init(&UartHandle) != HAL_OK)
 800110e:	f7ff fef9 	bl	8000f04 <HAL_UART_Init>
 8001112:	b118      	cbz	r0, 800111c <main+0xbc>
  BSP_LED_On(LED2);
 8001114:	4620      	mov	r0, r4
 8001116:	f7ff fa2f 	bl	8000578 <BSP_LED_On>
  while(1)
 800111a:	e7fe      	b.n	800111a <main+0xba>
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <main+0xd4>)
 800111e:	f000 f8d9 	bl	80012d4 <iprintf>
  while (1)
 8001122:	e7fe      	b.n	8001122 <main+0xc2>
 8001124:	40023800 	.word	0x40023800
 8001128:	40007000 	.word	0x40007000
 800112c:	200000a8 	.word	0x200000a8
 8001130:	40004400 	.word	0x40004400
 8001134:	080021b0 	.word	0x080021b0

08001138 <__io_putchar>:
{
 8001138:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF); 
 800113a:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800113e:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF); 
 8001140:	2201      	movs	r2, #1
 8001142:	a901      	add	r1, sp, #4
 8001144:	4803      	ldr	r0, [pc, #12]	; (8001154 <__io_putchar+0x1c>)
 8001146:	f7ff ff0b 	bl	8000f60 <HAL_UART_Transmit>
}
 800114a:	9801      	ldr	r0, [sp, #4]
 800114c:	b003      	add	sp, #12
 800114e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001152:	bf00      	nop
 8001154:	200000a8 	.word	0x200000a8

08001158 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration  
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{  
 8001158:	b510      	push	{r4, lr}
 800115a:	b088      	sub	sp, #32
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 800115c:	4b1a      	ldr	r3, [pc, #104]	; (80011c8 <HAL_UART_MspInit+0x70>)
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
  
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800115e:	481b      	ldr	r0, [pc, #108]	; (80011cc <HAL_UART_MspInit+0x74>)
  USARTx_TX_GPIO_CLK_ENABLE();
 8001160:	2200      	movs	r2, #0
 8001162:	9200      	str	r2, [sp, #0]
 8001164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001166:	f041 0101 	orr.w	r1, r1, #1
 800116a:	6319      	str	r1, [r3, #48]	; 0x30
 800116c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800116e:	f001 0101 	and.w	r1, r1, #1
 8001172:	9100      	str	r1, [sp, #0]
 8001174:	9900      	ldr	r1, [sp, #0]
  USARTx_RX_GPIO_CLK_ENABLE();
 8001176:	9201      	str	r2, [sp, #4]
 8001178:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800117a:	f041 0101 	orr.w	r1, r1, #1
 800117e:	6319      	str	r1, [r3, #48]	; 0x30
 8001180:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001182:	f001 0101 	and.w	r1, r1, #1
 8001186:	9101      	str	r1, [sp, #4]
 8001188:	9901      	ldr	r1, [sp, #4]
  USARTx_CLK_ENABLE(); 
 800118a:	9202      	str	r2, [sp, #8]
 800118c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800118e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001192:	641a      	str	r2, [r3, #64]	; 0x40
 8001194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800119e:	2204      	movs	r2, #4
 80011a0:	2302      	movs	r3, #2
 80011a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80011a6:	2407      	movs	r4, #7
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 80011a8:	2201      	movs	r2, #1
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80011aa:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 80011ac:	e9cd 2305 	strd	r2, r3, [sp, #20]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 80011b0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 80011b2:	f7ff faaf 	bl	8000714 <HAL_GPIO_Init>
    
  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80011b6:	2308      	movs	r3, #8
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
    
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <HAL_UART_MspInit+0x74>)
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 80011ba:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80011bc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 80011be:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 80011c0:	f7ff faa8 	bl	8000714 <HAL_GPIO_Init>
}
 80011c4:	b008      	add	sp, #32
 80011c6:	bd10      	pop	{r4, pc}
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000

080011d0 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 80011d0:	4770      	bx	lr

080011d2 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80011d2:	e7fe      	b.n	80011d2 <HardFault_Handler>

080011d4 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <MemManage_Handler>

080011d6 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80011d6:	e7fe      	b.n	80011d6 <BusFault_Handler>

080011d8 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <UsageFault_Handler>

080011da <SVC_Handler>:
 80011da:	4770      	bx	lr

080011dc <DebugMon_Handler>:
 80011dc:	4770      	bx	lr

080011de <PendSV_Handler>:
 80011de:	4770      	bx	lr

080011e0 <SysTick_Handler>:
 80011e0:	4770      	bx	lr
	...

080011e4 <_sbrk>:




caddr_t _sbrk(int incr)
{
 80011e4:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <_sbrk+0x34>)
 80011e8:	6819      	ldr	r1, [r3, #0]
{
 80011ea:	4602      	mov	r2, r0
	if (heap_end == 0)
 80011ec:	b909      	cbnz	r1, 80011f2 <_sbrk+0xe>
		heap_end = &end;
 80011ee:	490b      	ldr	r1, [pc, #44]	; (800121c <_sbrk+0x38>)
 80011f0:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;

#ifdef FreeRTOS
	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80011f2:	490b      	ldr	r1, [pc, #44]	; (8001220 <_sbrk+0x3c>)
	prev_heap_end = heap_end;
 80011f4:	6818      	ldr	r0, [r3, #0]
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 80011f6:	6809      	ldr	r1, [r1, #0]
 80011f8:	6809      	ldr	r1, [r1, #0]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;

	if (heap_end + incr > min_stack_ptr)
 80011fa:	4402      	add	r2, r0
	min_stack_ptr -= MAX_STACK_SIZE;
 80011fc:	f5a1 7100 	sub.w	r1, r1, #512	; 0x200
	if (heap_end + incr > min_stack_ptr)
 8001200:	428a      	cmp	r2, r1
 8001202:	d906      	bls.n	8001212 <_sbrk+0x2e>
	if (heap_end + incr > stack_ptr)
#endif
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001204:	f000 f834 	bl	8001270 <__errno>
 8001208:	230c      	movs	r3, #12
 800120a:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8001210:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8001212:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8001214:	e7fc      	b.n	8001210 <_sbrk+0x2c>
 8001216:	bf00      	nop
 8001218:	20000098 	.word	0x20000098
 800121c:	200000fc 	.word	0x200000fc
 8001220:	e000ed08 	.word	0xe000ed08

08001224 <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 8001224:	b570      	push	{r4, r5, r6, lr}
 8001226:	460e      	mov	r6, r1
 8001228:	4614      	mov	r4, r2
	int DataIdx;

		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2500      	movs	r5, #0
 800122c:	42a5      	cmp	r5, r4
 800122e:	db01      	blt.n	8001234 <_write+0x10>
		{
		   __io_putchar( *ptr++ );
		}
	return len;
}
 8001230:	4620      	mov	r0, r4
 8001232:	bd70      	pop	{r4, r5, r6, pc}
		   __io_putchar( *ptr++ );
 8001234:	5d70      	ldrb	r0, [r6, r5]
 8001236:	f7ff ff7f 	bl	8001138 <__io_putchar>
		for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123a:	3501      	adds	r5, #1
 800123c:	e7f6      	b.n	800122c <_write+0x8>

0800123e <_close>:

int _close(int file)
{
	return -1;
}
 800123e:	f04f 30ff 	mov.w	r0, #4294967295
 8001242:	4770      	bx	lr

08001244 <_fstat>:

int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001244:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001248:	604b      	str	r3, [r1, #4]
	return 0;
}
 800124a:	2000      	movs	r0, #0
 800124c:	4770      	bx	lr

0800124e <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800124e:	2001      	movs	r0, #1
 8001250:	4770      	bx	lr

08001252 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001252:	2000      	movs	r0, #0
 8001254:	4770      	bx	lr

08001256 <_read>:

int _read(int file, char *ptr, int len)
{
 8001256:	b570      	push	{r4, r5, r6, lr}
 8001258:	460e      	mov	r6, r1
 800125a:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125c:	2500      	movs	r5, #0
 800125e:	42a5      	cmp	r5, r4
 8001260:	db01      	blt.n	8001266 <_read+0x10>
	{
	  *ptr++ = __io_getchar();
	}

   return len;
}
 8001262:	4620      	mov	r0, r4
 8001264:	bd70      	pop	{r4, r5, r6, pc}
	  *ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800126c:	3501      	adds	r5, #1
 800126e:	e7f6      	b.n	800125e <_read+0x8>

08001270 <__errno>:
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <__errno+0x8>)
 8001272:	6818      	ldr	r0, [r3, #0]
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000018 	.word	0x20000018

0800127c <__libc_init_array>:
 800127c:	b570      	push	{r4, r5, r6, lr}
 800127e:	4d0d      	ldr	r5, [pc, #52]	; (80012b4 <__libc_init_array+0x38>)
 8001280:	4c0d      	ldr	r4, [pc, #52]	; (80012b8 <__libc_init_array+0x3c>)
 8001282:	1b64      	subs	r4, r4, r5
 8001284:	10a4      	asrs	r4, r4, #2
 8001286:	2600      	movs	r6, #0
 8001288:	42a6      	cmp	r6, r4
 800128a:	d109      	bne.n	80012a0 <__libc_init_array+0x24>
 800128c:	4d0b      	ldr	r5, [pc, #44]	; (80012bc <__libc_init_array+0x40>)
 800128e:	4c0c      	ldr	r4, [pc, #48]	; (80012c0 <__libc_init_array+0x44>)
 8001290:	f000 ff76 	bl	8002180 <_init>
 8001294:	1b64      	subs	r4, r4, r5
 8001296:	10a4      	asrs	r4, r4, #2
 8001298:	2600      	movs	r6, #0
 800129a:	42a6      	cmp	r6, r4
 800129c:	d105      	bne.n	80012aa <__libc_init_array+0x2e>
 800129e:	bd70      	pop	{r4, r5, r6, pc}
 80012a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80012a4:	4798      	blx	r3
 80012a6:	3601      	adds	r6, #1
 80012a8:	e7ee      	b.n	8001288 <__libc_init_array+0xc>
 80012aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80012ae:	4798      	blx	r3
 80012b0:	3601      	adds	r6, #1
 80012b2:	e7f2      	b.n	800129a <__libc_init_array+0x1e>
 80012b4:	080022a0 	.word	0x080022a0
 80012b8:	080022a0 	.word	0x080022a0
 80012bc:	080022a0 	.word	0x080022a0
 80012c0:	080022a4 	.word	0x080022a4

080012c4 <memset>:
 80012c4:	4402      	add	r2, r0
 80012c6:	4603      	mov	r3, r0
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d100      	bne.n	80012ce <memset+0xa>
 80012cc:	4770      	bx	lr
 80012ce:	f803 1b01 	strb.w	r1, [r3], #1
 80012d2:	e7f9      	b.n	80012c8 <memset+0x4>

080012d4 <iprintf>:
 80012d4:	b40f      	push	{r0, r1, r2, r3}
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <iprintf+0x2c>)
 80012d8:	b513      	push	{r0, r1, r4, lr}
 80012da:	681c      	ldr	r4, [r3, #0]
 80012dc:	b124      	cbz	r4, 80012e8 <iprintf+0x14>
 80012de:	69a3      	ldr	r3, [r4, #24]
 80012e0:	b913      	cbnz	r3, 80012e8 <iprintf+0x14>
 80012e2:	4620      	mov	r0, r4
 80012e4:	f000 f866 	bl	80013b4 <__sinit>
 80012e8:	ab05      	add	r3, sp, #20
 80012ea:	9a04      	ldr	r2, [sp, #16]
 80012ec:	68a1      	ldr	r1, [r4, #8]
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	4620      	mov	r0, r4
 80012f2:	f000 f983 	bl	80015fc <_vfiprintf_r>
 80012f6:	b002      	add	sp, #8
 80012f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr
 8001300:	20000018 	.word	0x20000018

08001304 <std>:
 8001304:	2300      	movs	r3, #0
 8001306:	b510      	push	{r4, lr}
 8001308:	4604      	mov	r4, r0
 800130a:	e9c0 3300 	strd	r3, r3, [r0]
 800130e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001312:	6083      	str	r3, [r0, #8]
 8001314:	8181      	strh	r1, [r0, #12]
 8001316:	6643      	str	r3, [r0, #100]	; 0x64
 8001318:	81c2      	strh	r2, [r0, #14]
 800131a:	6183      	str	r3, [r0, #24]
 800131c:	4619      	mov	r1, r3
 800131e:	2208      	movs	r2, #8
 8001320:	305c      	adds	r0, #92	; 0x5c
 8001322:	f7ff ffcf 	bl	80012c4 <memset>
 8001326:	4b05      	ldr	r3, [pc, #20]	; (800133c <std+0x38>)
 8001328:	6263      	str	r3, [r4, #36]	; 0x24
 800132a:	4b05      	ldr	r3, [pc, #20]	; (8001340 <std+0x3c>)
 800132c:	62a3      	str	r3, [r4, #40]	; 0x28
 800132e:	4b05      	ldr	r3, [pc, #20]	; (8001344 <std+0x40>)
 8001330:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001332:	4b05      	ldr	r3, [pc, #20]	; (8001348 <std+0x44>)
 8001334:	6224      	str	r4, [r4, #32]
 8001336:	6323      	str	r3, [r4, #48]	; 0x30
 8001338:	bd10      	pop	{r4, pc}
 800133a:	bf00      	nop
 800133c:	08001ba5 	.word	0x08001ba5
 8001340:	08001bc7 	.word	0x08001bc7
 8001344:	08001bff 	.word	0x08001bff
 8001348:	08001c23 	.word	0x08001c23

0800134c <_cleanup_r>:
 800134c:	4901      	ldr	r1, [pc, #4]	; (8001354 <_cleanup_r+0x8>)
 800134e:	f000 b8af 	b.w	80014b0 <_fwalk_reent>
 8001352:	bf00      	nop
 8001354:	08001efd 	.word	0x08001efd

08001358 <__sfmoreglue>:
 8001358:	b570      	push	{r4, r5, r6, lr}
 800135a:	1e4a      	subs	r2, r1, #1
 800135c:	2568      	movs	r5, #104	; 0x68
 800135e:	4355      	muls	r5, r2
 8001360:	460e      	mov	r6, r1
 8001362:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001366:	f000 f8c5 	bl	80014f4 <_malloc_r>
 800136a:	4604      	mov	r4, r0
 800136c:	b140      	cbz	r0, 8001380 <__sfmoreglue+0x28>
 800136e:	2100      	movs	r1, #0
 8001370:	e9c0 1600 	strd	r1, r6, [r0]
 8001374:	300c      	adds	r0, #12
 8001376:	60a0      	str	r0, [r4, #8]
 8001378:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800137c:	f7ff ffa2 	bl	80012c4 <memset>
 8001380:	4620      	mov	r0, r4
 8001382:	bd70      	pop	{r4, r5, r6, pc}

08001384 <__sfp_lock_acquire>:
 8001384:	4801      	ldr	r0, [pc, #4]	; (800138c <__sfp_lock_acquire+0x8>)
 8001386:	f000 b8b3 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 800138a:	bf00      	nop
 800138c:	200000f4 	.word	0x200000f4

08001390 <__sfp_lock_release>:
 8001390:	4801      	ldr	r0, [pc, #4]	; (8001398 <__sfp_lock_release+0x8>)
 8001392:	f000 b8ae 	b.w	80014f2 <__retarget_lock_release_recursive>
 8001396:	bf00      	nop
 8001398:	200000f4 	.word	0x200000f4

0800139c <__sinit_lock_acquire>:
 800139c:	4801      	ldr	r0, [pc, #4]	; (80013a4 <__sinit_lock_acquire+0x8>)
 800139e:	f000 b8a7 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 80013a2:	bf00      	nop
 80013a4:	200000ef 	.word	0x200000ef

080013a8 <__sinit_lock_release>:
 80013a8:	4801      	ldr	r0, [pc, #4]	; (80013b0 <__sinit_lock_release+0x8>)
 80013aa:	f000 b8a2 	b.w	80014f2 <__retarget_lock_release_recursive>
 80013ae:	bf00      	nop
 80013b0:	200000ef 	.word	0x200000ef

080013b4 <__sinit>:
 80013b4:	b510      	push	{r4, lr}
 80013b6:	4604      	mov	r4, r0
 80013b8:	f7ff fff0 	bl	800139c <__sinit_lock_acquire>
 80013bc:	69a3      	ldr	r3, [r4, #24]
 80013be:	b11b      	cbz	r3, 80013c8 <__sinit+0x14>
 80013c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80013c4:	f7ff bff0 	b.w	80013a8 <__sinit_lock_release>
 80013c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80013cc:	6523      	str	r3, [r4, #80]	; 0x50
 80013ce:	4b13      	ldr	r3, [pc, #76]	; (800141c <__sinit+0x68>)
 80013d0:	4a13      	ldr	r2, [pc, #76]	; (8001420 <__sinit+0x6c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	62a2      	str	r2, [r4, #40]	; 0x28
 80013d6:	42a3      	cmp	r3, r4
 80013d8:	bf04      	itt	eq
 80013da:	2301      	moveq	r3, #1
 80013dc:	61a3      	streq	r3, [r4, #24]
 80013de:	4620      	mov	r0, r4
 80013e0:	f000 f820 	bl	8001424 <__sfp>
 80013e4:	6060      	str	r0, [r4, #4]
 80013e6:	4620      	mov	r0, r4
 80013e8:	f000 f81c 	bl	8001424 <__sfp>
 80013ec:	60a0      	str	r0, [r4, #8]
 80013ee:	4620      	mov	r0, r4
 80013f0:	f000 f818 	bl	8001424 <__sfp>
 80013f4:	2200      	movs	r2, #0
 80013f6:	60e0      	str	r0, [r4, #12]
 80013f8:	2104      	movs	r1, #4
 80013fa:	6860      	ldr	r0, [r4, #4]
 80013fc:	f7ff ff82 	bl	8001304 <std>
 8001400:	68a0      	ldr	r0, [r4, #8]
 8001402:	2201      	movs	r2, #1
 8001404:	2109      	movs	r1, #9
 8001406:	f7ff ff7d 	bl	8001304 <std>
 800140a:	68e0      	ldr	r0, [r4, #12]
 800140c:	2202      	movs	r2, #2
 800140e:	2112      	movs	r1, #18
 8001410:	f7ff ff78 	bl	8001304 <std>
 8001414:	2301      	movs	r3, #1
 8001416:	61a3      	str	r3, [r4, #24]
 8001418:	e7d2      	b.n	80013c0 <__sinit+0xc>
 800141a:	bf00      	nop
 800141c:	08002200 	.word	0x08002200
 8001420:	0800134d 	.word	0x0800134d

08001424 <__sfp>:
 8001424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001426:	4607      	mov	r7, r0
 8001428:	f7ff ffac 	bl	8001384 <__sfp_lock_acquire>
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <__sfp+0x84>)
 800142e:	681e      	ldr	r6, [r3, #0]
 8001430:	69b3      	ldr	r3, [r6, #24]
 8001432:	b913      	cbnz	r3, 800143a <__sfp+0x16>
 8001434:	4630      	mov	r0, r6
 8001436:	f7ff ffbd 	bl	80013b4 <__sinit>
 800143a:	3648      	adds	r6, #72	; 0x48
 800143c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001440:	3b01      	subs	r3, #1
 8001442:	d503      	bpl.n	800144c <__sfp+0x28>
 8001444:	6833      	ldr	r3, [r6, #0]
 8001446:	b30b      	cbz	r3, 800148c <__sfp+0x68>
 8001448:	6836      	ldr	r6, [r6, #0]
 800144a:	e7f7      	b.n	800143c <__sfp+0x18>
 800144c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001450:	b9d5      	cbnz	r5, 8001488 <__sfp+0x64>
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <__sfp+0x88>)
 8001454:	60e3      	str	r3, [r4, #12]
 8001456:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800145a:	6665      	str	r5, [r4, #100]	; 0x64
 800145c:	f000 f847 	bl	80014ee <__retarget_lock_init_recursive>
 8001460:	f7ff ff96 	bl	8001390 <__sfp_lock_release>
 8001464:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001468:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800146c:	6025      	str	r5, [r4, #0]
 800146e:	61a5      	str	r5, [r4, #24]
 8001470:	2208      	movs	r2, #8
 8001472:	4629      	mov	r1, r5
 8001474:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001478:	f7ff ff24 	bl	80012c4 <memset>
 800147c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001480:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001484:	4620      	mov	r0, r4
 8001486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001488:	3468      	adds	r4, #104	; 0x68
 800148a:	e7d9      	b.n	8001440 <__sfp+0x1c>
 800148c:	2104      	movs	r1, #4
 800148e:	4638      	mov	r0, r7
 8001490:	f7ff ff62 	bl	8001358 <__sfmoreglue>
 8001494:	4604      	mov	r4, r0
 8001496:	6030      	str	r0, [r6, #0]
 8001498:	2800      	cmp	r0, #0
 800149a:	d1d5      	bne.n	8001448 <__sfp+0x24>
 800149c:	f7ff ff78 	bl	8001390 <__sfp_lock_release>
 80014a0:	230c      	movs	r3, #12
 80014a2:	603b      	str	r3, [r7, #0]
 80014a4:	e7ee      	b.n	8001484 <__sfp+0x60>
 80014a6:	bf00      	nop
 80014a8:	08002200 	.word	0x08002200
 80014ac:	ffff0001 	.word	0xffff0001

080014b0 <_fwalk_reent>:
 80014b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80014b4:	4606      	mov	r6, r0
 80014b6:	4688      	mov	r8, r1
 80014b8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80014bc:	2700      	movs	r7, #0
 80014be:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80014c2:	f1b9 0901 	subs.w	r9, r9, #1
 80014c6:	d505      	bpl.n	80014d4 <_fwalk_reent+0x24>
 80014c8:	6824      	ldr	r4, [r4, #0]
 80014ca:	2c00      	cmp	r4, #0
 80014cc:	d1f7      	bne.n	80014be <_fwalk_reent+0xe>
 80014ce:	4638      	mov	r0, r7
 80014d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80014d4:	89ab      	ldrh	r3, [r5, #12]
 80014d6:	2b01      	cmp	r3, #1
 80014d8:	d907      	bls.n	80014ea <_fwalk_reent+0x3a>
 80014da:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80014de:	3301      	adds	r3, #1
 80014e0:	d003      	beq.n	80014ea <_fwalk_reent+0x3a>
 80014e2:	4629      	mov	r1, r5
 80014e4:	4630      	mov	r0, r6
 80014e6:	47c0      	blx	r8
 80014e8:	4307      	orrs	r7, r0
 80014ea:	3568      	adds	r5, #104	; 0x68
 80014ec:	e7e9      	b.n	80014c2 <_fwalk_reent+0x12>

080014ee <__retarget_lock_init_recursive>:
 80014ee:	4770      	bx	lr

080014f0 <__retarget_lock_acquire_recursive>:
 80014f0:	4770      	bx	lr

080014f2 <__retarget_lock_release_recursive>:
 80014f2:	4770      	bx	lr

080014f4 <_malloc_r>:
 80014f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014f6:	1ccd      	adds	r5, r1, #3
 80014f8:	f025 0503 	bic.w	r5, r5, #3
 80014fc:	3508      	adds	r5, #8
 80014fe:	2d0c      	cmp	r5, #12
 8001500:	bf38      	it	cc
 8001502:	250c      	movcc	r5, #12
 8001504:	2d00      	cmp	r5, #0
 8001506:	4606      	mov	r6, r0
 8001508:	db01      	blt.n	800150e <_malloc_r+0x1a>
 800150a:	42a9      	cmp	r1, r5
 800150c:	d903      	bls.n	8001516 <_malloc_r+0x22>
 800150e:	230c      	movs	r3, #12
 8001510:	6033      	str	r3, [r6, #0]
 8001512:	2000      	movs	r0, #0
 8001514:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001516:	f000 fda3 	bl	8002060 <__malloc_lock>
 800151a:	4921      	ldr	r1, [pc, #132]	; (80015a0 <_malloc_r+0xac>)
 800151c:	680a      	ldr	r2, [r1, #0]
 800151e:	4614      	mov	r4, r2
 8001520:	b99c      	cbnz	r4, 800154a <_malloc_r+0x56>
 8001522:	4f20      	ldr	r7, [pc, #128]	; (80015a4 <_malloc_r+0xb0>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	b923      	cbnz	r3, 8001532 <_malloc_r+0x3e>
 8001528:	4621      	mov	r1, r4
 800152a:	4630      	mov	r0, r6
 800152c:	f000 fb2a 	bl	8001b84 <_sbrk_r>
 8001530:	6038      	str	r0, [r7, #0]
 8001532:	4629      	mov	r1, r5
 8001534:	4630      	mov	r0, r6
 8001536:	f000 fb25 	bl	8001b84 <_sbrk_r>
 800153a:	1c43      	adds	r3, r0, #1
 800153c:	d123      	bne.n	8001586 <_malloc_r+0x92>
 800153e:	230c      	movs	r3, #12
 8001540:	6033      	str	r3, [r6, #0]
 8001542:	4630      	mov	r0, r6
 8001544:	f000 fd92 	bl	800206c <__malloc_unlock>
 8001548:	e7e3      	b.n	8001512 <_malloc_r+0x1e>
 800154a:	6823      	ldr	r3, [r4, #0]
 800154c:	1b5b      	subs	r3, r3, r5
 800154e:	d417      	bmi.n	8001580 <_malloc_r+0x8c>
 8001550:	2b0b      	cmp	r3, #11
 8001552:	d903      	bls.n	800155c <_malloc_r+0x68>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	441c      	add	r4, r3
 8001558:	6025      	str	r5, [r4, #0]
 800155a:	e004      	b.n	8001566 <_malloc_r+0x72>
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	42a2      	cmp	r2, r4
 8001560:	bf0c      	ite	eq
 8001562:	600b      	streq	r3, [r1, #0]
 8001564:	6053      	strne	r3, [r2, #4]
 8001566:	4630      	mov	r0, r6
 8001568:	f000 fd80 	bl	800206c <__malloc_unlock>
 800156c:	f104 000b 	add.w	r0, r4, #11
 8001570:	1d23      	adds	r3, r4, #4
 8001572:	f020 0007 	bic.w	r0, r0, #7
 8001576:	1ac2      	subs	r2, r0, r3
 8001578:	d0cc      	beq.n	8001514 <_malloc_r+0x20>
 800157a:	1a1b      	subs	r3, r3, r0
 800157c:	50a3      	str	r3, [r4, r2]
 800157e:	e7c9      	b.n	8001514 <_malloc_r+0x20>
 8001580:	4622      	mov	r2, r4
 8001582:	6864      	ldr	r4, [r4, #4]
 8001584:	e7cc      	b.n	8001520 <_malloc_r+0x2c>
 8001586:	1cc4      	adds	r4, r0, #3
 8001588:	f024 0403 	bic.w	r4, r4, #3
 800158c:	42a0      	cmp	r0, r4
 800158e:	d0e3      	beq.n	8001558 <_malloc_r+0x64>
 8001590:	1a21      	subs	r1, r4, r0
 8001592:	4630      	mov	r0, r6
 8001594:	f000 faf6 	bl	8001b84 <_sbrk_r>
 8001598:	3001      	adds	r0, #1
 800159a:	d1dd      	bne.n	8001558 <_malloc_r+0x64>
 800159c:	e7cf      	b.n	800153e <_malloc_r+0x4a>
 800159e:	bf00      	nop
 80015a0:	2000009c 	.word	0x2000009c
 80015a4:	200000a0 	.word	0x200000a0

080015a8 <__sfputc_r>:
 80015a8:	6893      	ldr	r3, [r2, #8]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	b410      	push	{r4}
 80015b0:	6093      	str	r3, [r2, #8]
 80015b2:	da08      	bge.n	80015c6 <__sfputc_r+0x1e>
 80015b4:	6994      	ldr	r4, [r2, #24]
 80015b6:	42a3      	cmp	r3, r4
 80015b8:	db01      	blt.n	80015be <__sfputc_r+0x16>
 80015ba:	290a      	cmp	r1, #10
 80015bc:	d103      	bne.n	80015c6 <__sfputc_r+0x1e>
 80015be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015c2:	f000 bb33 	b.w	8001c2c <__swbuf_r>
 80015c6:	6813      	ldr	r3, [r2, #0]
 80015c8:	1c58      	adds	r0, r3, #1
 80015ca:	6010      	str	r0, [r2, #0]
 80015cc:	7019      	strb	r1, [r3, #0]
 80015ce:	4608      	mov	r0, r1
 80015d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <__sfputs_r>:
 80015d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015d8:	4606      	mov	r6, r0
 80015da:	460f      	mov	r7, r1
 80015dc:	4614      	mov	r4, r2
 80015de:	18d5      	adds	r5, r2, r3
 80015e0:	42ac      	cmp	r4, r5
 80015e2:	d101      	bne.n	80015e8 <__sfputs_r+0x12>
 80015e4:	2000      	movs	r0, #0
 80015e6:	e007      	b.n	80015f8 <__sfputs_r+0x22>
 80015e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015ec:	463a      	mov	r2, r7
 80015ee:	4630      	mov	r0, r6
 80015f0:	f7ff ffda 	bl	80015a8 <__sfputc_r>
 80015f4:	1c43      	adds	r3, r0, #1
 80015f6:	d1f3      	bne.n	80015e0 <__sfputs_r+0xa>
 80015f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080015fc <_vfiprintf_r>:
 80015fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001600:	460d      	mov	r5, r1
 8001602:	b09d      	sub	sp, #116	; 0x74
 8001604:	4614      	mov	r4, r2
 8001606:	4698      	mov	r8, r3
 8001608:	4606      	mov	r6, r0
 800160a:	b118      	cbz	r0, 8001614 <_vfiprintf_r+0x18>
 800160c:	6983      	ldr	r3, [r0, #24]
 800160e:	b90b      	cbnz	r3, 8001614 <_vfiprintf_r+0x18>
 8001610:	f7ff fed0 	bl	80013b4 <__sinit>
 8001614:	4b89      	ldr	r3, [pc, #548]	; (800183c <_vfiprintf_r+0x240>)
 8001616:	429d      	cmp	r5, r3
 8001618:	d11b      	bne.n	8001652 <_vfiprintf_r+0x56>
 800161a:	6875      	ldr	r5, [r6, #4]
 800161c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800161e:	07d9      	lsls	r1, r3, #31
 8001620:	d405      	bmi.n	800162e <_vfiprintf_r+0x32>
 8001622:	89ab      	ldrh	r3, [r5, #12]
 8001624:	059a      	lsls	r2, r3, #22
 8001626:	d402      	bmi.n	800162e <_vfiprintf_r+0x32>
 8001628:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800162a:	f7ff ff61 	bl	80014f0 <__retarget_lock_acquire_recursive>
 800162e:	89ab      	ldrh	r3, [r5, #12]
 8001630:	071b      	lsls	r3, r3, #28
 8001632:	d501      	bpl.n	8001638 <_vfiprintf_r+0x3c>
 8001634:	692b      	ldr	r3, [r5, #16]
 8001636:	b9eb      	cbnz	r3, 8001674 <_vfiprintf_r+0x78>
 8001638:	4629      	mov	r1, r5
 800163a:	4630      	mov	r0, r6
 800163c:	f000 fb5a 	bl	8001cf4 <__swsetup_r>
 8001640:	b1c0      	cbz	r0, 8001674 <_vfiprintf_r+0x78>
 8001642:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001644:	07dc      	lsls	r4, r3, #31
 8001646:	d50e      	bpl.n	8001666 <_vfiprintf_r+0x6a>
 8001648:	f04f 30ff 	mov.w	r0, #4294967295
 800164c:	b01d      	add	sp, #116	; 0x74
 800164e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001652:	4b7b      	ldr	r3, [pc, #492]	; (8001840 <_vfiprintf_r+0x244>)
 8001654:	429d      	cmp	r5, r3
 8001656:	d101      	bne.n	800165c <_vfiprintf_r+0x60>
 8001658:	68b5      	ldr	r5, [r6, #8]
 800165a:	e7df      	b.n	800161c <_vfiprintf_r+0x20>
 800165c:	4b79      	ldr	r3, [pc, #484]	; (8001844 <_vfiprintf_r+0x248>)
 800165e:	429d      	cmp	r5, r3
 8001660:	bf08      	it	eq
 8001662:	68f5      	ldreq	r5, [r6, #12]
 8001664:	e7da      	b.n	800161c <_vfiprintf_r+0x20>
 8001666:	89ab      	ldrh	r3, [r5, #12]
 8001668:	0598      	lsls	r0, r3, #22
 800166a:	d4ed      	bmi.n	8001648 <_vfiprintf_r+0x4c>
 800166c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800166e:	f7ff ff40 	bl	80014f2 <__retarget_lock_release_recursive>
 8001672:	e7e9      	b.n	8001648 <_vfiprintf_r+0x4c>
 8001674:	2300      	movs	r3, #0
 8001676:	9309      	str	r3, [sp, #36]	; 0x24
 8001678:	2320      	movs	r3, #32
 800167a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800167e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001682:	2330      	movs	r3, #48	; 0x30
 8001684:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001848 <_vfiprintf_r+0x24c>
 8001688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800168c:	f04f 0901 	mov.w	r9, #1
 8001690:	4623      	mov	r3, r4
 8001692:	469a      	mov	sl, r3
 8001694:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001698:	b10a      	cbz	r2, 800169e <_vfiprintf_r+0xa2>
 800169a:	2a25      	cmp	r2, #37	; 0x25
 800169c:	d1f9      	bne.n	8001692 <_vfiprintf_r+0x96>
 800169e:	ebba 0b04 	subs.w	fp, sl, r4
 80016a2:	d00b      	beq.n	80016bc <_vfiprintf_r+0xc0>
 80016a4:	465b      	mov	r3, fp
 80016a6:	4622      	mov	r2, r4
 80016a8:	4629      	mov	r1, r5
 80016aa:	4630      	mov	r0, r6
 80016ac:	f7ff ff93 	bl	80015d6 <__sfputs_r>
 80016b0:	3001      	adds	r0, #1
 80016b2:	f000 80aa 	beq.w	800180a <_vfiprintf_r+0x20e>
 80016b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80016b8:	445a      	add	r2, fp
 80016ba:	9209      	str	r2, [sp, #36]	; 0x24
 80016bc:	f89a 3000 	ldrb.w	r3, [sl]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	f000 80a2 	beq.w	800180a <_vfiprintf_r+0x20e>
 80016c6:	2300      	movs	r3, #0
 80016c8:	f04f 32ff 	mov.w	r2, #4294967295
 80016cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80016d0:	f10a 0a01 	add.w	sl, sl, #1
 80016d4:	9304      	str	r3, [sp, #16]
 80016d6:	9307      	str	r3, [sp, #28]
 80016d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80016dc:	931a      	str	r3, [sp, #104]	; 0x68
 80016de:	4654      	mov	r4, sl
 80016e0:	2205      	movs	r2, #5
 80016e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80016e6:	4858      	ldr	r0, [pc, #352]	; (8001848 <_vfiprintf_r+0x24c>)
 80016e8:	f7fe fd7a 	bl	80001e0 <memchr>
 80016ec:	9a04      	ldr	r2, [sp, #16]
 80016ee:	b9d8      	cbnz	r0, 8001728 <_vfiprintf_r+0x12c>
 80016f0:	06d1      	lsls	r1, r2, #27
 80016f2:	bf44      	itt	mi
 80016f4:	2320      	movmi	r3, #32
 80016f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80016fa:	0713      	lsls	r3, r2, #28
 80016fc:	bf44      	itt	mi
 80016fe:	232b      	movmi	r3, #43	; 0x2b
 8001700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001704:	f89a 3000 	ldrb.w	r3, [sl]
 8001708:	2b2a      	cmp	r3, #42	; 0x2a
 800170a:	d015      	beq.n	8001738 <_vfiprintf_r+0x13c>
 800170c:	9a07      	ldr	r2, [sp, #28]
 800170e:	4654      	mov	r4, sl
 8001710:	2000      	movs	r0, #0
 8001712:	f04f 0c0a 	mov.w	ip, #10
 8001716:	4621      	mov	r1, r4
 8001718:	f811 3b01 	ldrb.w	r3, [r1], #1
 800171c:	3b30      	subs	r3, #48	; 0x30
 800171e:	2b09      	cmp	r3, #9
 8001720:	d94e      	bls.n	80017c0 <_vfiprintf_r+0x1c4>
 8001722:	b1b0      	cbz	r0, 8001752 <_vfiprintf_r+0x156>
 8001724:	9207      	str	r2, [sp, #28]
 8001726:	e014      	b.n	8001752 <_vfiprintf_r+0x156>
 8001728:	eba0 0308 	sub.w	r3, r0, r8
 800172c:	fa09 f303 	lsl.w	r3, r9, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	9304      	str	r3, [sp, #16]
 8001734:	46a2      	mov	sl, r4
 8001736:	e7d2      	b.n	80016de <_vfiprintf_r+0xe2>
 8001738:	9b03      	ldr	r3, [sp, #12]
 800173a:	1d19      	adds	r1, r3, #4
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	9103      	str	r1, [sp, #12]
 8001740:	2b00      	cmp	r3, #0
 8001742:	bfbb      	ittet	lt
 8001744:	425b      	neglt	r3, r3
 8001746:	f042 0202 	orrlt.w	r2, r2, #2
 800174a:	9307      	strge	r3, [sp, #28]
 800174c:	9307      	strlt	r3, [sp, #28]
 800174e:	bfb8      	it	lt
 8001750:	9204      	strlt	r2, [sp, #16]
 8001752:	7823      	ldrb	r3, [r4, #0]
 8001754:	2b2e      	cmp	r3, #46	; 0x2e
 8001756:	d10c      	bne.n	8001772 <_vfiprintf_r+0x176>
 8001758:	7863      	ldrb	r3, [r4, #1]
 800175a:	2b2a      	cmp	r3, #42	; 0x2a
 800175c:	d135      	bne.n	80017ca <_vfiprintf_r+0x1ce>
 800175e:	9b03      	ldr	r3, [sp, #12]
 8001760:	1d1a      	adds	r2, r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	9203      	str	r2, [sp, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	bfb8      	it	lt
 800176a:	f04f 33ff 	movlt.w	r3, #4294967295
 800176e:	3402      	adds	r4, #2
 8001770:	9305      	str	r3, [sp, #20]
 8001772:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001858 <_vfiprintf_r+0x25c>
 8001776:	7821      	ldrb	r1, [r4, #0]
 8001778:	2203      	movs	r2, #3
 800177a:	4650      	mov	r0, sl
 800177c:	f7fe fd30 	bl	80001e0 <memchr>
 8001780:	b140      	cbz	r0, 8001794 <_vfiprintf_r+0x198>
 8001782:	2340      	movs	r3, #64	; 0x40
 8001784:	eba0 000a 	sub.w	r0, r0, sl
 8001788:	fa03 f000 	lsl.w	r0, r3, r0
 800178c:	9b04      	ldr	r3, [sp, #16]
 800178e:	4303      	orrs	r3, r0
 8001790:	3401      	adds	r4, #1
 8001792:	9304      	str	r3, [sp, #16]
 8001794:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001798:	482c      	ldr	r0, [pc, #176]	; (800184c <_vfiprintf_r+0x250>)
 800179a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800179e:	2206      	movs	r2, #6
 80017a0:	f7fe fd1e 	bl	80001e0 <memchr>
 80017a4:	2800      	cmp	r0, #0
 80017a6:	d03f      	beq.n	8001828 <_vfiprintf_r+0x22c>
 80017a8:	4b29      	ldr	r3, [pc, #164]	; (8001850 <_vfiprintf_r+0x254>)
 80017aa:	bb1b      	cbnz	r3, 80017f4 <_vfiprintf_r+0x1f8>
 80017ac:	9b03      	ldr	r3, [sp, #12]
 80017ae:	3307      	adds	r3, #7
 80017b0:	f023 0307 	bic.w	r3, r3, #7
 80017b4:	3308      	adds	r3, #8
 80017b6:	9303      	str	r3, [sp, #12]
 80017b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80017ba:	443b      	add	r3, r7
 80017bc:	9309      	str	r3, [sp, #36]	; 0x24
 80017be:	e767      	b.n	8001690 <_vfiprintf_r+0x94>
 80017c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80017c4:	460c      	mov	r4, r1
 80017c6:	2001      	movs	r0, #1
 80017c8:	e7a5      	b.n	8001716 <_vfiprintf_r+0x11a>
 80017ca:	2300      	movs	r3, #0
 80017cc:	3401      	adds	r4, #1
 80017ce:	9305      	str	r3, [sp, #20]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f04f 0c0a 	mov.w	ip, #10
 80017d6:	4620      	mov	r0, r4
 80017d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80017dc:	3a30      	subs	r2, #48	; 0x30
 80017de:	2a09      	cmp	r2, #9
 80017e0:	d903      	bls.n	80017ea <_vfiprintf_r+0x1ee>
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d0c5      	beq.n	8001772 <_vfiprintf_r+0x176>
 80017e6:	9105      	str	r1, [sp, #20]
 80017e8:	e7c3      	b.n	8001772 <_vfiprintf_r+0x176>
 80017ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80017ee:	4604      	mov	r4, r0
 80017f0:	2301      	movs	r3, #1
 80017f2:	e7f0      	b.n	80017d6 <_vfiprintf_r+0x1da>
 80017f4:	ab03      	add	r3, sp, #12
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	462a      	mov	r2, r5
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <_vfiprintf_r+0x258>)
 80017fc:	a904      	add	r1, sp, #16
 80017fe:	4630      	mov	r0, r6
 8001800:	f3af 8000 	nop.w
 8001804:	4607      	mov	r7, r0
 8001806:	1c78      	adds	r0, r7, #1
 8001808:	d1d6      	bne.n	80017b8 <_vfiprintf_r+0x1bc>
 800180a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800180c:	07d9      	lsls	r1, r3, #31
 800180e:	d405      	bmi.n	800181c <_vfiprintf_r+0x220>
 8001810:	89ab      	ldrh	r3, [r5, #12]
 8001812:	059a      	lsls	r2, r3, #22
 8001814:	d402      	bmi.n	800181c <_vfiprintf_r+0x220>
 8001816:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001818:	f7ff fe6b 	bl	80014f2 <__retarget_lock_release_recursive>
 800181c:	89ab      	ldrh	r3, [r5, #12]
 800181e:	065b      	lsls	r3, r3, #25
 8001820:	f53f af12 	bmi.w	8001648 <_vfiprintf_r+0x4c>
 8001824:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001826:	e711      	b.n	800164c <_vfiprintf_r+0x50>
 8001828:	ab03      	add	r3, sp, #12
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	462a      	mov	r2, r5
 800182e:	4b09      	ldr	r3, [pc, #36]	; (8001854 <_vfiprintf_r+0x258>)
 8001830:	a904      	add	r1, sp, #16
 8001832:	4630      	mov	r0, r6
 8001834:	f000 f880 	bl	8001938 <_printf_i>
 8001838:	e7e4      	b.n	8001804 <_vfiprintf_r+0x208>
 800183a:	bf00      	nop
 800183c:	08002224 	.word	0x08002224
 8001840:	08002244 	.word	0x08002244
 8001844:	08002204 	.word	0x08002204
 8001848:	08002264 	.word	0x08002264
 800184c:	0800226e 	.word	0x0800226e
 8001850:	00000000 	.word	0x00000000
 8001854:	080015d7 	.word	0x080015d7
 8001858:	0800226a 	.word	0x0800226a

0800185c <_printf_common>:
 800185c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001860:	4616      	mov	r6, r2
 8001862:	4699      	mov	r9, r3
 8001864:	688a      	ldr	r2, [r1, #8]
 8001866:	690b      	ldr	r3, [r1, #16]
 8001868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800186c:	4293      	cmp	r3, r2
 800186e:	bfb8      	it	lt
 8001870:	4613      	movlt	r3, r2
 8001872:	6033      	str	r3, [r6, #0]
 8001874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001878:	4607      	mov	r7, r0
 800187a:	460c      	mov	r4, r1
 800187c:	b10a      	cbz	r2, 8001882 <_printf_common+0x26>
 800187e:	3301      	adds	r3, #1
 8001880:	6033      	str	r3, [r6, #0]
 8001882:	6823      	ldr	r3, [r4, #0]
 8001884:	0699      	lsls	r1, r3, #26
 8001886:	bf42      	ittt	mi
 8001888:	6833      	ldrmi	r3, [r6, #0]
 800188a:	3302      	addmi	r3, #2
 800188c:	6033      	strmi	r3, [r6, #0]
 800188e:	6825      	ldr	r5, [r4, #0]
 8001890:	f015 0506 	ands.w	r5, r5, #6
 8001894:	d106      	bne.n	80018a4 <_printf_common+0x48>
 8001896:	f104 0a19 	add.w	sl, r4, #25
 800189a:	68e3      	ldr	r3, [r4, #12]
 800189c:	6832      	ldr	r2, [r6, #0]
 800189e:	1a9b      	subs	r3, r3, r2
 80018a0:	42ab      	cmp	r3, r5
 80018a2:	dc26      	bgt.n	80018f2 <_printf_common+0x96>
 80018a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80018a8:	1e13      	subs	r3, r2, #0
 80018aa:	6822      	ldr	r2, [r4, #0]
 80018ac:	bf18      	it	ne
 80018ae:	2301      	movne	r3, #1
 80018b0:	0692      	lsls	r2, r2, #26
 80018b2:	d42b      	bmi.n	800190c <_printf_common+0xb0>
 80018b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80018b8:	4649      	mov	r1, r9
 80018ba:	4638      	mov	r0, r7
 80018bc:	47c0      	blx	r8
 80018be:	3001      	adds	r0, #1
 80018c0:	d01e      	beq.n	8001900 <_printf_common+0xa4>
 80018c2:	6823      	ldr	r3, [r4, #0]
 80018c4:	68e5      	ldr	r5, [r4, #12]
 80018c6:	6832      	ldr	r2, [r6, #0]
 80018c8:	f003 0306 	and.w	r3, r3, #6
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	bf08      	it	eq
 80018d0:	1aad      	subeq	r5, r5, r2
 80018d2:	68a3      	ldr	r3, [r4, #8]
 80018d4:	6922      	ldr	r2, [r4, #16]
 80018d6:	bf0c      	ite	eq
 80018d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80018dc:	2500      	movne	r5, #0
 80018de:	4293      	cmp	r3, r2
 80018e0:	bfc4      	itt	gt
 80018e2:	1a9b      	subgt	r3, r3, r2
 80018e4:	18ed      	addgt	r5, r5, r3
 80018e6:	2600      	movs	r6, #0
 80018e8:	341a      	adds	r4, #26
 80018ea:	42b5      	cmp	r5, r6
 80018ec:	d11a      	bne.n	8001924 <_printf_common+0xc8>
 80018ee:	2000      	movs	r0, #0
 80018f0:	e008      	b.n	8001904 <_printf_common+0xa8>
 80018f2:	2301      	movs	r3, #1
 80018f4:	4652      	mov	r2, sl
 80018f6:	4649      	mov	r1, r9
 80018f8:	4638      	mov	r0, r7
 80018fa:	47c0      	blx	r8
 80018fc:	3001      	adds	r0, #1
 80018fe:	d103      	bne.n	8001908 <_printf_common+0xac>
 8001900:	f04f 30ff 	mov.w	r0, #4294967295
 8001904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001908:	3501      	adds	r5, #1
 800190a:	e7c6      	b.n	800189a <_printf_common+0x3e>
 800190c:	18e1      	adds	r1, r4, r3
 800190e:	1c5a      	adds	r2, r3, #1
 8001910:	2030      	movs	r0, #48	; 0x30
 8001912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001916:	4422      	add	r2, r4
 8001918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800191c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001920:	3302      	adds	r3, #2
 8001922:	e7c7      	b.n	80018b4 <_printf_common+0x58>
 8001924:	2301      	movs	r3, #1
 8001926:	4622      	mov	r2, r4
 8001928:	4649      	mov	r1, r9
 800192a:	4638      	mov	r0, r7
 800192c:	47c0      	blx	r8
 800192e:	3001      	adds	r0, #1
 8001930:	d0e6      	beq.n	8001900 <_printf_common+0xa4>
 8001932:	3601      	adds	r6, #1
 8001934:	e7d9      	b.n	80018ea <_printf_common+0x8e>
	...

08001938 <_printf_i>:
 8001938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800193c:	460c      	mov	r4, r1
 800193e:	4691      	mov	r9, r2
 8001940:	7e27      	ldrb	r7, [r4, #24]
 8001942:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001944:	2f78      	cmp	r7, #120	; 0x78
 8001946:	4680      	mov	r8, r0
 8001948:	469a      	mov	sl, r3
 800194a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800194e:	d807      	bhi.n	8001960 <_printf_i+0x28>
 8001950:	2f62      	cmp	r7, #98	; 0x62
 8001952:	d80a      	bhi.n	800196a <_printf_i+0x32>
 8001954:	2f00      	cmp	r7, #0
 8001956:	f000 80d8 	beq.w	8001b0a <_printf_i+0x1d2>
 800195a:	2f58      	cmp	r7, #88	; 0x58
 800195c:	f000 80a3 	beq.w	8001aa6 <_printf_i+0x16e>
 8001960:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8001964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001968:	e03a      	b.n	80019e0 <_printf_i+0xa8>
 800196a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800196e:	2b15      	cmp	r3, #21
 8001970:	d8f6      	bhi.n	8001960 <_printf_i+0x28>
 8001972:	a001      	add	r0, pc, #4	; (adr r0, 8001978 <_printf_i+0x40>)
 8001974:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8001978:	080019d1 	.word	0x080019d1
 800197c:	080019e5 	.word	0x080019e5
 8001980:	08001961 	.word	0x08001961
 8001984:	08001961 	.word	0x08001961
 8001988:	08001961 	.word	0x08001961
 800198c:	08001961 	.word	0x08001961
 8001990:	080019e5 	.word	0x080019e5
 8001994:	08001961 	.word	0x08001961
 8001998:	08001961 	.word	0x08001961
 800199c:	08001961 	.word	0x08001961
 80019a0:	08001961 	.word	0x08001961
 80019a4:	08001af1 	.word	0x08001af1
 80019a8:	08001a15 	.word	0x08001a15
 80019ac:	08001ad3 	.word	0x08001ad3
 80019b0:	08001961 	.word	0x08001961
 80019b4:	08001961 	.word	0x08001961
 80019b8:	08001b13 	.word	0x08001b13
 80019bc:	08001961 	.word	0x08001961
 80019c0:	08001a15 	.word	0x08001a15
 80019c4:	08001961 	.word	0x08001961
 80019c8:	08001961 	.word	0x08001961
 80019cc:	08001adb 	.word	0x08001adb
 80019d0:	680b      	ldr	r3, [r1, #0]
 80019d2:	1d1a      	adds	r2, r3, #4
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	600a      	str	r2, [r1, #0]
 80019d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80019dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80019e0:	2301      	movs	r3, #1
 80019e2:	e0a3      	b.n	8001b2c <_printf_i+0x1f4>
 80019e4:	6825      	ldr	r5, [r4, #0]
 80019e6:	6808      	ldr	r0, [r1, #0]
 80019e8:	062e      	lsls	r6, r5, #24
 80019ea:	f100 0304 	add.w	r3, r0, #4
 80019ee:	d50a      	bpl.n	8001a06 <_printf_i+0xce>
 80019f0:	6805      	ldr	r5, [r0, #0]
 80019f2:	600b      	str	r3, [r1, #0]
 80019f4:	2d00      	cmp	r5, #0
 80019f6:	da03      	bge.n	8001a00 <_printf_i+0xc8>
 80019f8:	232d      	movs	r3, #45	; 0x2d
 80019fa:	426d      	negs	r5, r5
 80019fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a00:	485e      	ldr	r0, [pc, #376]	; (8001b7c <_printf_i+0x244>)
 8001a02:	230a      	movs	r3, #10
 8001a04:	e019      	b.n	8001a3a <_printf_i+0x102>
 8001a06:	f015 0f40 	tst.w	r5, #64	; 0x40
 8001a0a:	6805      	ldr	r5, [r0, #0]
 8001a0c:	600b      	str	r3, [r1, #0]
 8001a0e:	bf18      	it	ne
 8001a10:	b22d      	sxthne	r5, r5
 8001a12:	e7ef      	b.n	80019f4 <_printf_i+0xbc>
 8001a14:	680b      	ldr	r3, [r1, #0]
 8001a16:	6825      	ldr	r5, [r4, #0]
 8001a18:	1d18      	adds	r0, r3, #4
 8001a1a:	6008      	str	r0, [r1, #0]
 8001a1c:	0628      	lsls	r0, r5, #24
 8001a1e:	d501      	bpl.n	8001a24 <_printf_i+0xec>
 8001a20:	681d      	ldr	r5, [r3, #0]
 8001a22:	e002      	b.n	8001a2a <_printf_i+0xf2>
 8001a24:	0669      	lsls	r1, r5, #25
 8001a26:	d5fb      	bpl.n	8001a20 <_printf_i+0xe8>
 8001a28:	881d      	ldrh	r5, [r3, #0]
 8001a2a:	4854      	ldr	r0, [pc, #336]	; (8001b7c <_printf_i+0x244>)
 8001a2c:	2f6f      	cmp	r7, #111	; 0x6f
 8001a2e:	bf0c      	ite	eq
 8001a30:	2308      	moveq	r3, #8
 8001a32:	230a      	movne	r3, #10
 8001a34:	2100      	movs	r1, #0
 8001a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001a3a:	6866      	ldr	r6, [r4, #4]
 8001a3c:	60a6      	str	r6, [r4, #8]
 8001a3e:	2e00      	cmp	r6, #0
 8001a40:	bfa2      	ittt	ge
 8001a42:	6821      	ldrge	r1, [r4, #0]
 8001a44:	f021 0104 	bicge.w	r1, r1, #4
 8001a48:	6021      	strge	r1, [r4, #0]
 8001a4a:	b90d      	cbnz	r5, 8001a50 <_printf_i+0x118>
 8001a4c:	2e00      	cmp	r6, #0
 8001a4e:	d04d      	beq.n	8001aec <_printf_i+0x1b4>
 8001a50:	4616      	mov	r6, r2
 8001a52:	fbb5 f1f3 	udiv	r1, r5, r3
 8001a56:	fb03 5711 	mls	r7, r3, r1, r5
 8001a5a:	5dc7      	ldrb	r7, [r0, r7]
 8001a5c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001a60:	462f      	mov	r7, r5
 8001a62:	42bb      	cmp	r3, r7
 8001a64:	460d      	mov	r5, r1
 8001a66:	d9f4      	bls.n	8001a52 <_printf_i+0x11a>
 8001a68:	2b08      	cmp	r3, #8
 8001a6a:	d10b      	bne.n	8001a84 <_printf_i+0x14c>
 8001a6c:	6823      	ldr	r3, [r4, #0]
 8001a6e:	07df      	lsls	r7, r3, #31
 8001a70:	d508      	bpl.n	8001a84 <_printf_i+0x14c>
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	6861      	ldr	r1, [r4, #4]
 8001a76:	4299      	cmp	r1, r3
 8001a78:	bfde      	ittt	le
 8001a7a:	2330      	movle	r3, #48	; 0x30
 8001a7c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001a80:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001a84:	1b92      	subs	r2, r2, r6
 8001a86:	6122      	str	r2, [r4, #16]
 8001a88:	f8cd a000 	str.w	sl, [sp]
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	aa03      	add	r2, sp, #12
 8001a90:	4621      	mov	r1, r4
 8001a92:	4640      	mov	r0, r8
 8001a94:	f7ff fee2 	bl	800185c <_printf_common>
 8001a98:	3001      	adds	r0, #1
 8001a9a:	d14c      	bne.n	8001b36 <_printf_i+0x1fe>
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	b004      	add	sp, #16
 8001aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001aa6:	4835      	ldr	r0, [pc, #212]	; (8001b7c <_printf_i+0x244>)
 8001aa8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001aac:	6823      	ldr	r3, [r4, #0]
 8001aae:	680e      	ldr	r6, [r1, #0]
 8001ab0:	061f      	lsls	r7, r3, #24
 8001ab2:	f856 5b04 	ldr.w	r5, [r6], #4
 8001ab6:	600e      	str	r6, [r1, #0]
 8001ab8:	d514      	bpl.n	8001ae4 <_printf_i+0x1ac>
 8001aba:	07d9      	lsls	r1, r3, #31
 8001abc:	bf44      	itt	mi
 8001abe:	f043 0320 	orrmi.w	r3, r3, #32
 8001ac2:	6023      	strmi	r3, [r4, #0]
 8001ac4:	b91d      	cbnz	r5, 8001ace <_printf_i+0x196>
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	f023 0320 	bic.w	r3, r3, #32
 8001acc:	6023      	str	r3, [r4, #0]
 8001ace:	2310      	movs	r3, #16
 8001ad0:	e7b0      	b.n	8001a34 <_printf_i+0xfc>
 8001ad2:	6823      	ldr	r3, [r4, #0]
 8001ad4:	f043 0320 	orr.w	r3, r3, #32
 8001ad8:	6023      	str	r3, [r4, #0]
 8001ada:	2378      	movs	r3, #120	; 0x78
 8001adc:	4828      	ldr	r0, [pc, #160]	; (8001b80 <_printf_i+0x248>)
 8001ade:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001ae2:	e7e3      	b.n	8001aac <_printf_i+0x174>
 8001ae4:	065e      	lsls	r6, r3, #25
 8001ae6:	bf48      	it	mi
 8001ae8:	b2ad      	uxthmi	r5, r5
 8001aea:	e7e6      	b.n	8001aba <_printf_i+0x182>
 8001aec:	4616      	mov	r6, r2
 8001aee:	e7bb      	b.n	8001a68 <_printf_i+0x130>
 8001af0:	680b      	ldr	r3, [r1, #0]
 8001af2:	6826      	ldr	r6, [r4, #0]
 8001af4:	6960      	ldr	r0, [r4, #20]
 8001af6:	1d1d      	adds	r5, r3, #4
 8001af8:	600d      	str	r5, [r1, #0]
 8001afa:	0635      	lsls	r5, r6, #24
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	d501      	bpl.n	8001b04 <_printf_i+0x1cc>
 8001b00:	6018      	str	r0, [r3, #0]
 8001b02:	e002      	b.n	8001b0a <_printf_i+0x1d2>
 8001b04:	0671      	lsls	r1, r6, #25
 8001b06:	d5fb      	bpl.n	8001b00 <_printf_i+0x1c8>
 8001b08:	8018      	strh	r0, [r3, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6123      	str	r3, [r4, #16]
 8001b0e:	4616      	mov	r6, r2
 8001b10:	e7ba      	b.n	8001a88 <_printf_i+0x150>
 8001b12:	680b      	ldr	r3, [r1, #0]
 8001b14:	1d1a      	adds	r2, r3, #4
 8001b16:	600a      	str	r2, [r1, #0]
 8001b18:	681e      	ldr	r6, [r3, #0]
 8001b1a:	6862      	ldr	r2, [r4, #4]
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	4630      	mov	r0, r6
 8001b20:	f7fe fb5e 	bl	80001e0 <memchr>
 8001b24:	b108      	cbz	r0, 8001b2a <_printf_i+0x1f2>
 8001b26:	1b80      	subs	r0, r0, r6
 8001b28:	6060      	str	r0, [r4, #4]
 8001b2a:	6863      	ldr	r3, [r4, #4]
 8001b2c:	6123      	str	r3, [r4, #16]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001b34:	e7a8      	b.n	8001a88 <_printf_i+0x150>
 8001b36:	6923      	ldr	r3, [r4, #16]
 8001b38:	4632      	mov	r2, r6
 8001b3a:	4649      	mov	r1, r9
 8001b3c:	4640      	mov	r0, r8
 8001b3e:	47d0      	blx	sl
 8001b40:	3001      	adds	r0, #1
 8001b42:	d0ab      	beq.n	8001a9c <_printf_i+0x164>
 8001b44:	6823      	ldr	r3, [r4, #0]
 8001b46:	079b      	lsls	r3, r3, #30
 8001b48:	d413      	bmi.n	8001b72 <_printf_i+0x23a>
 8001b4a:	68e0      	ldr	r0, [r4, #12]
 8001b4c:	9b03      	ldr	r3, [sp, #12]
 8001b4e:	4298      	cmp	r0, r3
 8001b50:	bfb8      	it	lt
 8001b52:	4618      	movlt	r0, r3
 8001b54:	e7a4      	b.n	8001aa0 <_printf_i+0x168>
 8001b56:	2301      	movs	r3, #1
 8001b58:	4632      	mov	r2, r6
 8001b5a:	4649      	mov	r1, r9
 8001b5c:	4640      	mov	r0, r8
 8001b5e:	47d0      	blx	sl
 8001b60:	3001      	adds	r0, #1
 8001b62:	d09b      	beq.n	8001a9c <_printf_i+0x164>
 8001b64:	3501      	adds	r5, #1
 8001b66:	68e3      	ldr	r3, [r4, #12]
 8001b68:	9903      	ldr	r1, [sp, #12]
 8001b6a:	1a5b      	subs	r3, r3, r1
 8001b6c:	42ab      	cmp	r3, r5
 8001b6e:	dcf2      	bgt.n	8001b56 <_printf_i+0x21e>
 8001b70:	e7eb      	b.n	8001b4a <_printf_i+0x212>
 8001b72:	2500      	movs	r5, #0
 8001b74:	f104 0619 	add.w	r6, r4, #25
 8001b78:	e7f5      	b.n	8001b66 <_printf_i+0x22e>
 8001b7a:	bf00      	nop
 8001b7c:	08002275 	.word	0x08002275
 8001b80:	08002286 	.word	0x08002286

08001b84 <_sbrk_r>:
 8001b84:	b538      	push	{r3, r4, r5, lr}
 8001b86:	4d06      	ldr	r5, [pc, #24]	; (8001ba0 <_sbrk_r+0x1c>)
 8001b88:	2300      	movs	r3, #0
 8001b8a:	4604      	mov	r4, r0
 8001b8c:	4608      	mov	r0, r1
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	f7ff fb28 	bl	80011e4 <_sbrk>
 8001b94:	1c43      	adds	r3, r0, #1
 8001b96:	d102      	bne.n	8001b9e <_sbrk_r+0x1a>
 8001b98:	682b      	ldr	r3, [r5, #0]
 8001b9a:	b103      	cbz	r3, 8001b9e <_sbrk_r+0x1a>
 8001b9c:	6023      	str	r3, [r4, #0]
 8001b9e:	bd38      	pop	{r3, r4, r5, pc}
 8001ba0:	200000f8 	.word	0x200000f8

08001ba4 <__sread>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	460c      	mov	r4, r1
 8001ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bac:	f000 fab4 	bl	8002118 <_read_r>
 8001bb0:	2800      	cmp	r0, #0
 8001bb2:	bfab      	itete	ge
 8001bb4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001bb6:	89a3      	ldrhlt	r3, [r4, #12]
 8001bb8:	181b      	addge	r3, r3, r0
 8001bba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001bbe:	bfac      	ite	ge
 8001bc0:	6563      	strge	r3, [r4, #84]	; 0x54
 8001bc2:	81a3      	strhlt	r3, [r4, #12]
 8001bc4:	bd10      	pop	{r4, pc}

08001bc6 <__swrite>:
 8001bc6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bca:	461f      	mov	r7, r3
 8001bcc:	898b      	ldrh	r3, [r1, #12]
 8001bce:	05db      	lsls	r3, r3, #23
 8001bd0:	4605      	mov	r5, r0
 8001bd2:	460c      	mov	r4, r1
 8001bd4:	4616      	mov	r6, r2
 8001bd6:	d505      	bpl.n	8001be4 <__swrite+0x1e>
 8001bd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001bdc:	2302      	movs	r3, #2
 8001bde:	2200      	movs	r2, #0
 8001be0:	f000 f9c8 	bl	8001f74 <_lseek_r>
 8001be4:	89a3      	ldrh	r3, [r4, #12]
 8001be6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001bea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bee:	81a3      	strh	r3, [r4, #12]
 8001bf0:	4632      	mov	r2, r6
 8001bf2:	463b      	mov	r3, r7
 8001bf4:	4628      	mov	r0, r5
 8001bf6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001bfa:	f000 b869 	b.w	8001cd0 <_write_r>

08001bfe <__sseek>:
 8001bfe:	b510      	push	{r4, lr}
 8001c00:	460c      	mov	r4, r1
 8001c02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c06:	f000 f9b5 	bl	8001f74 <_lseek_r>
 8001c0a:	1c43      	adds	r3, r0, #1
 8001c0c:	89a3      	ldrh	r3, [r4, #12]
 8001c0e:	bf15      	itete	ne
 8001c10:	6560      	strne	r0, [r4, #84]	; 0x54
 8001c12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001c16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001c1a:	81a3      	strheq	r3, [r4, #12]
 8001c1c:	bf18      	it	ne
 8001c1e:	81a3      	strhne	r3, [r4, #12]
 8001c20:	bd10      	pop	{r4, pc}

08001c22 <__sclose>:
 8001c22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001c26:	f000 b8d3 	b.w	8001dd0 <_close_r>
	...

08001c2c <__swbuf_r>:
 8001c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c2e:	460e      	mov	r6, r1
 8001c30:	4614      	mov	r4, r2
 8001c32:	4605      	mov	r5, r0
 8001c34:	b118      	cbz	r0, 8001c3e <__swbuf_r+0x12>
 8001c36:	6983      	ldr	r3, [r0, #24]
 8001c38:	b90b      	cbnz	r3, 8001c3e <__swbuf_r+0x12>
 8001c3a:	f7ff fbbb 	bl	80013b4 <__sinit>
 8001c3e:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <__swbuf_r+0x98>)
 8001c40:	429c      	cmp	r4, r3
 8001c42:	d12b      	bne.n	8001c9c <__swbuf_r+0x70>
 8001c44:	686c      	ldr	r4, [r5, #4]
 8001c46:	69a3      	ldr	r3, [r4, #24]
 8001c48:	60a3      	str	r3, [r4, #8]
 8001c4a:	89a3      	ldrh	r3, [r4, #12]
 8001c4c:	071a      	lsls	r2, r3, #28
 8001c4e:	d52f      	bpl.n	8001cb0 <__swbuf_r+0x84>
 8001c50:	6923      	ldr	r3, [r4, #16]
 8001c52:	b36b      	cbz	r3, 8001cb0 <__swbuf_r+0x84>
 8001c54:	6923      	ldr	r3, [r4, #16]
 8001c56:	6820      	ldr	r0, [r4, #0]
 8001c58:	1ac0      	subs	r0, r0, r3
 8001c5a:	6963      	ldr	r3, [r4, #20]
 8001c5c:	b2f6      	uxtb	r6, r6
 8001c5e:	4283      	cmp	r3, r0
 8001c60:	4637      	mov	r7, r6
 8001c62:	dc04      	bgt.n	8001c6e <__swbuf_r+0x42>
 8001c64:	4621      	mov	r1, r4
 8001c66:	4628      	mov	r0, r5
 8001c68:	f000 f948 	bl	8001efc <_fflush_r>
 8001c6c:	bb30      	cbnz	r0, 8001cbc <__swbuf_r+0x90>
 8001c6e:	68a3      	ldr	r3, [r4, #8]
 8001c70:	3b01      	subs	r3, #1
 8001c72:	60a3      	str	r3, [r4, #8]
 8001c74:	6823      	ldr	r3, [r4, #0]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	6022      	str	r2, [r4, #0]
 8001c7a:	701e      	strb	r6, [r3, #0]
 8001c7c:	6963      	ldr	r3, [r4, #20]
 8001c7e:	3001      	adds	r0, #1
 8001c80:	4283      	cmp	r3, r0
 8001c82:	d004      	beq.n	8001c8e <__swbuf_r+0x62>
 8001c84:	89a3      	ldrh	r3, [r4, #12]
 8001c86:	07db      	lsls	r3, r3, #31
 8001c88:	d506      	bpl.n	8001c98 <__swbuf_r+0x6c>
 8001c8a:	2e0a      	cmp	r6, #10
 8001c8c:	d104      	bne.n	8001c98 <__swbuf_r+0x6c>
 8001c8e:	4621      	mov	r1, r4
 8001c90:	4628      	mov	r0, r5
 8001c92:	f000 f933 	bl	8001efc <_fflush_r>
 8001c96:	b988      	cbnz	r0, 8001cbc <__swbuf_r+0x90>
 8001c98:	4638      	mov	r0, r7
 8001c9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001c9c:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <__swbuf_r+0x9c>)
 8001c9e:	429c      	cmp	r4, r3
 8001ca0:	d101      	bne.n	8001ca6 <__swbuf_r+0x7a>
 8001ca2:	68ac      	ldr	r4, [r5, #8]
 8001ca4:	e7cf      	b.n	8001c46 <__swbuf_r+0x1a>
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <__swbuf_r+0xa0>)
 8001ca8:	429c      	cmp	r4, r3
 8001caa:	bf08      	it	eq
 8001cac:	68ec      	ldreq	r4, [r5, #12]
 8001cae:	e7ca      	b.n	8001c46 <__swbuf_r+0x1a>
 8001cb0:	4621      	mov	r1, r4
 8001cb2:	4628      	mov	r0, r5
 8001cb4:	f000 f81e 	bl	8001cf4 <__swsetup_r>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d0cb      	beq.n	8001c54 <__swbuf_r+0x28>
 8001cbc:	f04f 37ff 	mov.w	r7, #4294967295
 8001cc0:	e7ea      	b.n	8001c98 <__swbuf_r+0x6c>
 8001cc2:	bf00      	nop
 8001cc4:	08002224 	.word	0x08002224
 8001cc8:	08002244 	.word	0x08002244
 8001ccc:	08002204 	.word	0x08002204

08001cd0 <_write_r>:
 8001cd0:	b538      	push	{r3, r4, r5, lr}
 8001cd2:	4d07      	ldr	r5, [pc, #28]	; (8001cf0 <_write_r+0x20>)
 8001cd4:	4604      	mov	r4, r0
 8001cd6:	4608      	mov	r0, r1
 8001cd8:	4611      	mov	r1, r2
 8001cda:	2200      	movs	r2, #0
 8001cdc:	602a      	str	r2, [r5, #0]
 8001cde:	461a      	mov	r2, r3
 8001ce0:	f7ff faa0 	bl	8001224 <_write>
 8001ce4:	1c43      	adds	r3, r0, #1
 8001ce6:	d102      	bne.n	8001cee <_write_r+0x1e>
 8001ce8:	682b      	ldr	r3, [r5, #0]
 8001cea:	b103      	cbz	r3, 8001cee <_write_r+0x1e>
 8001cec:	6023      	str	r3, [r4, #0]
 8001cee:	bd38      	pop	{r3, r4, r5, pc}
 8001cf0:	200000f8 	.word	0x200000f8

08001cf4 <__swsetup_r>:
 8001cf4:	4b32      	ldr	r3, [pc, #200]	; (8001dc0 <__swsetup_r+0xcc>)
 8001cf6:	b570      	push	{r4, r5, r6, lr}
 8001cf8:	681d      	ldr	r5, [r3, #0]
 8001cfa:	4606      	mov	r6, r0
 8001cfc:	460c      	mov	r4, r1
 8001cfe:	b125      	cbz	r5, 8001d0a <__swsetup_r+0x16>
 8001d00:	69ab      	ldr	r3, [r5, #24]
 8001d02:	b913      	cbnz	r3, 8001d0a <__swsetup_r+0x16>
 8001d04:	4628      	mov	r0, r5
 8001d06:	f7ff fb55 	bl	80013b4 <__sinit>
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <__swsetup_r+0xd0>)
 8001d0c:	429c      	cmp	r4, r3
 8001d0e:	d10f      	bne.n	8001d30 <__swsetup_r+0x3c>
 8001d10:	686c      	ldr	r4, [r5, #4]
 8001d12:	89a3      	ldrh	r3, [r4, #12]
 8001d14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d18:	0719      	lsls	r1, r3, #28
 8001d1a:	d42c      	bmi.n	8001d76 <__swsetup_r+0x82>
 8001d1c:	06dd      	lsls	r5, r3, #27
 8001d1e:	d411      	bmi.n	8001d44 <__swsetup_r+0x50>
 8001d20:	2309      	movs	r3, #9
 8001d22:	6033      	str	r3, [r6, #0]
 8001d24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001d28:	81a3      	strh	r3, [r4, #12]
 8001d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8001d2e:	e03e      	b.n	8001dae <__swsetup_r+0xba>
 8001d30:	4b25      	ldr	r3, [pc, #148]	; (8001dc8 <__swsetup_r+0xd4>)
 8001d32:	429c      	cmp	r4, r3
 8001d34:	d101      	bne.n	8001d3a <__swsetup_r+0x46>
 8001d36:	68ac      	ldr	r4, [r5, #8]
 8001d38:	e7eb      	b.n	8001d12 <__swsetup_r+0x1e>
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <__swsetup_r+0xd8>)
 8001d3c:	429c      	cmp	r4, r3
 8001d3e:	bf08      	it	eq
 8001d40:	68ec      	ldreq	r4, [r5, #12]
 8001d42:	e7e6      	b.n	8001d12 <__swsetup_r+0x1e>
 8001d44:	0758      	lsls	r0, r3, #29
 8001d46:	d512      	bpl.n	8001d6e <__swsetup_r+0x7a>
 8001d48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001d4a:	b141      	cbz	r1, 8001d5e <__swsetup_r+0x6a>
 8001d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001d50:	4299      	cmp	r1, r3
 8001d52:	d002      	beq.n	8001d5a <__swsetup_r+0x66>
 8001d54:	4630      	mov	r0, r6
 8001d56:	f000 f98f 	bl	8002078 <_free_r>
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	6363      	str	r3, [r4, #52]	; 0x34
 8001d5e:	89a3      	ldrh	r3, [r4, #12]
 8001d60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001d64:	81a3      	strh	r3, [r4, #12]
 8001d66:	2300      	movs	r3, #0
 8001d68:	6063      	str	r3, [r4, #4]
 8001d6a:	6923      	ldr	r3, [r4, #16]
 8001d6c:	6023      	str	r3, [r4, #0]
 8001d6e:	89a3      	ldrh	r3, [r4, #12]
 8001d70:	f043 0308 	orr.w	r3, r3, #8
 8001d74:	81a3      	strh	r3, [r4, #12]
 8001d76:	6923      	ldr	r3, [r4, #16]
 8001d78:	b94b      	cbnz	r3, 8001d8e <__swsetup_r+0x9a>
 8001d7a:	89a3      	ldrh	r3, [r4, #12]
 8001d7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d84:	d003      	beq.n	8001d8e <__swsetup_r+0x9a>
 8001d86:	4621      	mov	r1, r4
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f000 f929 	bl	8001fe0 <__smakebuf_r>
 8001d8e:	89a0      	ldrh	r0, [r4, #12]
 8001d90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001d94:	f010 0301 	ands.w	r3, r0, #1
 8001d98:	d00a      	beq.n	8001db0 <__swsetup_r+0xbc>
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	60a3      	str	r3, [r4, #8]
 8001d9e:	6963      	ldr	r3, [r4, #20]
 8001da0:	425b      	negs	r3, r3
 8001da2:	61a3      	str	r3, [r4, #24]
 8001da4:	6923      	ldr	r3, [r4, #16]
 8001da6:	b943      	cbnz	r3, 8001dba <__swsetup_r+0xc6>
 8001da8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001dac:	d1ba      	bne.n	8001d24 <__swsetup_r+0x30>
 8001dae:	bd70      	pop	{r4, r5, r6, pc}
 8001db0:	0781      	lsls	r1, r0, #30
 8001db2:	bf58      	it	pl
 8001db4:	6963      	ldrpl	r3, [r4, #20]
 8001db6:	60a3      	str	r3, [r4, #8]
 8001db8:	e7f4      	b.n	8001da4 <__swsetup_r+0xb0>
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e7f7      	b.n	8001dae <__swsetup_r+0xba>
 8001dbe:	bf00      	nop
 8001dc0:	20000018 	.word	0x20000018
 8001dc4:	08002224 	.word	0x08002224
 8001dc8:	08002244 	.word	0x08002244
 8001dcc:	08002204 	.word	0x08002204

08001dd0 <_close_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4d06      	ldr	r5, [pc, #24]	; (8001dec <_close_r+0x1c>)
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	4604      	mov	r4, r0
 8001dd8:	4608      	mov	r0, r1
 8001dda:	602b      	str	r3, [r5, #0]
 8001ddc:	f7ff fa2f 	bl	800123e <_close>
 8001de0:	1c43      	adds	r3, r0, #1
 8001de2:	d102      	bne.n	8001dea <_close_r+0x1a>
 8001de4:	682b      	ldr	r3, [r5, #0]
 8001de6:	b103      	cbz	r3, 8001dea <_close_r+0x1a>
 8001de8:	6023      	str	r3, [r4, #0]
 8001dea:	bd38      	pop	{r3, r4, r5, pc}
 8001dec:	200000f8 	.word	0x200000f8

08001df0 <__sflush_r>:
 8001df0:	898a      	ldrh	r2, [r1, #12]
 8001df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001df6:	4605      	mov	r5, r0
 8001df8:	0710      	lsls	r0, r2, #28
 8001dfa:	460c      	mov	r4, r1
 8001dfc:	d458      	bmi.n	8001eb0 <__sflush_r+0xc0>
 8001dfe:	684b      	ldr	r3, [r1, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	dc05      	bgt.n	8001e10 <__sflush_r+0x20>
 8001e04:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	dc02      	bgt.n	8001e10 <__sflush_r+0x20>
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001e10:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e12:	2e00      	cmp	r6, #0
 8001e14:	d0f9      	beq.n	8001e0a <__sflush_r+0x1a>
 8001e16:	2300      	movs	r3, #0
 8001e18:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001e1c:	682f      	ldr	r7, [r5, #0]
 8001e1e:	602b      	str	r3, [r5, #0]
 8001e20:	d032      	beq.n	8001e88 <__sflush_r+0x98>
 8001e22:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e24:	89a3      	ldrh	r3, [r4, #12]
 8001e26:	075a      	lsls	r2, r3, #29
 8001e28:	d505      	bpl.n	8001e36 <__sflush_r+0x46>
 8001e2a:	6863      	ldr	r3, [r4, #4]
 8001e2c:	1ac0      	subs	r0, r0, r3
 8001e2e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001e30:	b10b      	cbz	r3, 8001e36 <__sflush_r+0x46>
 8001e32:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e34:	1ac0      	subs	r0, r0, r3
 8001e36:	2300      	movs	r3, #0
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001e3c:	6a21      	ldr	r1, [r4, #32]
 8001e3e:	4628      	mov	r0, r5
 8001e40:	47b0      	blx	r6
 8001e42:	1c43      	adds	r3, r0, #1
 8001e44:	89a3      	ldrh	r3, [r4, #12]
 8001e46:	d106      	bne.n	8001e56 <__sflush_r+0x66>
 8001e48:	6829      	ldr	r1, [r5, #0]
 8001e4a:	291d      	cmp	r1, #29
 8001e4c:	d82c      	bhi.n	8001ea8 <__sflush_r+0xb8>
 8001e4e:	4a2a      	ldr	r2, [pc, #168]	; (8001ef8 <__sflush_r+0x108>)
 8001e50:	40ca      	lsrs	r2, r1
 8001e52:	07d6      	lsls	r6, r2, #31
 8001e54:	d528      	bpl.n	8001ea8 <__sflush_r+0xb8>
 8001e56:	2200      	movs	r2, #0
 8001e58:	6062      	str	r2, [r4, #4]
 8001e5a:	04d9      	lsls	r1, r3, #19
 8001e5c:	6922      	ldr	r2, [r4, #16]
 8001e5e:	6022      	str	r2, [r4, #0]
 8001e60:	d504      	bpl.n	8001e6c <__sflush_r+0x7c>
 8001e62:	1c42      	adds	r2, r0, #1
 8001e64:	d101      	bne.n	8001e6a <__sflush_r+0x7a>
 8001e66:	682b      	ldr	r3, [r5, #0]
 8001e68:	b903      	cbnz	r3, 8001e6c <__sflush_r+0x7c>
 8001e6a:	6560      	str	r0, [r4, #84]	; 0x54
 8001e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e6e:	602f      	str	r7, [r5, #0]
 8001e70:	2900      	cmp	r1, #0
 8001e72:	d0ca      	beq.n	8001e0a <__sflush_r+0x1a>
 8001e74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e78:	4299      	cmp	r1, r3
 8001e7a:	d002      	beq.n	8001e82 <__sflush_r+0x92>
 8001e7c:	4628      	mov	r0, r5
 8001e7e:	f000 f8fb 	bl	8002078 <_free_r>
 8001e82:	2000      	movs	r0, #0
 8001e84:	6360      	str	r0, [r4, #52]	; 0x34
 8001e86:	e7c1      	b.n	8001e0c <__sflush_r+0x1c>
 8001e88:	6a21      	ldr	r1, [r4, #32]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	4628      	mov	r0, r5
 8001e8e:	47b0      	blx	r6
 8001e90:	1c41      	adds	r1, r0, #1
 8001e92:	d1c7      	bne.n	8001e24 <__sflush_r+0x34>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d0c4      	beq.n	8001e24 <__sflush_r+0x34>
 8001e9a:	2b1d      	cmp	r3, #29
 8001e9c:	d001      	beq.n	8001ea2 <__sflush_r+0xb2>
 8001e9e:	2b16      	cmp	r3, #22
 8001ea0:	d101      	bne.n	8001ea6 <__sflush_r+0xb6>
 8001ea2:	602f      	str	r7, [r5, #0]
 8001ea4:	e7b1      	b.n	8001e0a <__sflush_r+0x1a>
 8001ea6:	89a3      	ldrh	r3, [r4, #12]
 8001ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eac:	81a3      	strh	r3, [r4, #12]
 8001eae:	e7ad      	b.n	8001e0c <__sflush_r+0x1c>
 8001eb0:	690f      	ldr	r7, [r1, #16]
 8001eb2:	2f00      	cmp	r7, #0
 8001eb4:	d0a9      	beq.n	8001e0a <__sflush_r+0x1a>
 8001eb6:	0793      	lsls	r3, r2, #30
 8001eb8:	680e      	ldr	r6, [r1, #0]
 8001eba:	bf08      	it	eq
 8001ebc:	694b      	ldreq	r3, [r1, #20]
 8001ebe:	600f      	str	r7, [r1, #0]
 8001ec0:	bf18      	it	ne
 8001ec2:	2300      	movne	r3, #0
 8001ec4:	eba6 0807 	sub.w	r8, r6, r7
 8001ec8:	608b      	str	r3, [r1, #8]
 8001eca:	f1b8 0f00 	cmp.w	r8, #0
 8001ece:	dd9c      	ble.n	8001e0a <__sflush_r+0x1a>
 8001ed0:	6a21      	ldr	r1, [r4, #32]
 8001ed2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001ed4:	4643      	mov	r3, r8
 8001ed6:	463a      	mov	r2, r7
 8001ed8:	4628      	mov	r0, r5
 8001eda:	47b0      	blx	r6
 8001edc:	2800      	cmp	r0, #0
 8001ede:	dc06      	bgt.n	8001eee <__sflush_r+0xfe>
 8001ee0:	89a3      	ldrh	r3, [r4, #12]
 8001ee2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001ee6:	81a3      	strh	r3, [r4, #12]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	e78e      	b.n	8001e0c <__sflush_r+0x1c>
 8001eee:	4407      	add	r7, r0
 8001ef0:	eba8 0800 	sub.w	r8, r8, r0
 8001ef4:	e7e9      	b.n	8001eca <__sflush_r+0xda>
 8001ef6:	bf00      	nop
 8001ef8:	20400001 	.word	0x20400001

08001efc <_fflush_r>:
 8001efc:	b538      	push	{r3, r4, r5, lr}
 8001efe:	690b      	ldr	r3, [r1, #16]
 8001f00:	4605      	mov	r5, r0
 8001f02:	460c      	mov	r4, r1
 8001f04:	b913      	cbnz	r3, 8001f0c <_fflush_r+0x10>
 8001f06:	2500      	movs	r5, #0
 8001f08:	4628      	mov	r0, r5
 8001f0a:	bd38      	pop	{r3, r4, r5, pc}
 8001f0c:	b118      	cbz	r0, 8001f16 <_fflush_r+0x1a>
 8001f0e:	6983      	ldr	r3, [r0, #24]
 8001f10:	b90b      	cbnz	r3, 8001f16 <_fflush_r+0x1a>
 8001f12:	f7ff fa4f 	bl	80013b4 <__sinit>
 8001f16:	4b14      	ldr	r3, [pc, #80]	; (8001f68 <_fflush_r+0x6c>)
 8001f18:	429c      	cmp	r4, r3
 8001f1a:	d11b      	bne.n	8001f54 <_fflush_r+0x58>
 8001f1c:	686c      	ldr	r4, [r5, #4]
 8001f1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0ef      	beq.n	8001f06 <_fflush_r+0xa>
 8001f26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001f28:	07d0      	lsls	r0, r2, #31
 8001f2a:	d404      	bmi.n	8001f36 <_fflush_r+0x3a>
 8001f2c:	0599      	lsls	r1, r3, #22
 8001f2e:	d402      	bmi.n	8001f36 <_fflush_r+0x3a>
 8001f30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f32:	f7ff fadd 	bl	80014f0 <__retarget_lock_acquire_recursive>
 8001f36:	4628      	mov	r0, r5
 8001f38:	4621      	mov	r1, r4
 8001f3a:	f7ff ff59 	bl	8001df0 <__sflush_r>
 8001f3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001f40:	07da      	lsls	r2, r3, #31
 8001f42:	4605      	mov	r5, r0
 8001f44:	d4e0      	bmi.n	8001f08 <_fflush_r+0xc>
 8001f46:	89a3      	ldrh	r3, [r4, #12]
 8001f48:	059b      	lsls	r3, r3, #22
 8001f4a:	d4dd      	bmi.n	8001f08 <_fflush_r+0xc>
 8001f4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001f4e:	f7ff fad0 	bl	80014f2 <__retarget_lock_release_recursive>
 8001f52:	e7d9      	b.n	8001f08 <_fflush_r+0xc>
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <_fflush_r+0x70>)
 8001f56:	429c      	cmp	r4, r3
 8001f58:	d101      	bne.n	8001f5e <_fflush_r+0x62>
 8001f5a:	68ac      	ldr	r4, [r5, #8]
 8001f5c:	e7df      	b.n	8001f1e <_fflush_r+0x22>
 8001f5e:	4b04      	ldr	r3, [pc, #16]	; (8001f70 <_fflush_r+0x74>)
 8001f60:	429c      	cmp	r4, r3
 8001f62:	bf08      	it	eq
 8001f64:	68ec      	ldreq	r4, [r5, #12]
 8001f66:	e7da      	b.n	8001f1e <_fflush_r+0x22>
 8001f68:	08002224 	.word	0x08002224
 8001f6c:	08002244 	.word	0x08002244
 8001f70:	08002204 	.word	0x08002204

08001f74 <_lseek_r>:
 8001f74:	b538      	push	{r3, r4, r5, lr}
 8001f76:	4d07      	ldr	r5, [pc, #28]	; (8001f94 <_lseek_r+0x20>)
 8001f78:	4604      	mov	r4, r0
 8001f7a:	4608      	mov	r0, r1
 8001f7c:	4611      	mov	r1, r2
 8001f7e:	2200      	movs	r2, #0
 8001f80:	602a      	str	r2, [r5, #0]
 8001f82:	461a      	mov	r2, r3
 8001f84:	f7ff f965 	bl	8001252 <_lseek>
 8001f88:	1c43      	adds	r3, r0, #1
 8001f8a:	d102      	bne.n	8001f92 <_lseek_r+0x1e>
 8001f8c:	682b      	ldr	r3, [r5, #0]
 8001f8e:	b103      	cbz	r3, 8001f92 <_lseek_r+0x1e>
 8001f90:	6023      	str	r3, [r4, #0]
 8001f92:	bd38      	pop	{r3, r4, r5, pc}
 8001f94:	200000f8 	.word	0x200000f8

08001f98 <__swhatbuf_r>:
 8001f98:	b570      	push	{r4, r5, r6, lr}
 8001f9a:	460e      	mov	r6, r1
 8001f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001fa0:	2900      	cmp	r1, #0
 8001fa2:	b096      	sub	sp, #88	; 0x58
 8001fa4:	4614      	mov	r4, r2
 8001fa6:	461d      	mov	r5, r3
 8001fa8:	da07      	bge.n	8001fba <__swhatbuf_r+0x22>
 8001faa:	2300      	movs	r3, #0
 8001fac:	602b      	str	r3, [r5, #0]
 8001fae:	89b3      	ldrh	r3, [r6, #12]
 8001fb0:	061a      	lsls	r2, r3, #24
 8001fb2:	d410      	bmi.n	8001fd6 <__swhatbuf_r+0x3e>
 8001fb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fb8:	e00e      	b.n	8001fd8 <__swhatbuf_r+0x40>
 8001fba:	466a      	mov	r2, sp
 8001fbc:	f000 f8be 	bl	800213c <_fstat_r>
 8001fc0:	2800      	cmp	r0, #0
 8001fc2:	dbf2      	blt.n	8001faa <__swhatbuf_r+0x12>
 8001fc4:	9a01      	ldr	r2, [sp, #4]
 8001fc6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001fca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001fce:	425a      	negs	r2, r3
 8001fd0:	415a      	adcs	r2, r3
 8001fd2:	602a      	str	r2, [r5, #0]
 8001fd4:	e7ee      	b.n	8001fb4 <__swhatbuf_r+0x1c>
 8001fd6:	2340      	movs	r3, #64	; 0x40
 8001fd8:	2000      	movs	r0, #0
 8001fda:	6023      	str	r3, [r4, #0]
 8001fdc:	b016      	add	sp, #88	; 0x58
 8001fde:	bd70      	pop	{r4, r5, r6, pc}

08001fe0 <__smakebuf_r>:
 8001fe0:	898b      	ldrh	r3, [r1, #12]
 8001fe2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001fe4:	079d      	lsls	r5, r3, #30
 8001fe6:	4606      	mov	r6, r0
 8001fe8:	460c      	mov	r4, r1
 8001fea:	d507      	bpl.n	8001ffc <__smakebuf_r+0x1c>
 8001fec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ff0:	6023      	str	r3, [r4, #0]
 8001ff2:	6123      	str	r3, [r4, #16]
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	6163      	str	r3, [r4, #20]
 8001ff8:	b002      	add	sp, #8
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	ab01      	add	r3, sp, #4
 8001ffe:	466a      	mov	r2, sp
 8002000:	f7ff ffca 	bl	8001f98 <__swhatbuf_r>
 8002004:	9900      	ldr	r1, [sp, #0]
 8002006:	4605      	mov	r5, r0
 8002008:	4630      	mov	r0, r6
 800200a:	f7ff fa73 	bl	80014f4 <_malloc_r>
 800200e:	b948      	cbnz	r0, 8002024 <__smakebuf_r+0x44>
 8002010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002014:	059a      	lsls	r2, r3, #22
 8002016:	d4ef      	bmi.n	8001ff8 <__smakebuf_r+0x18>
 8002018:	f023 0303 	bic.w	r3, r3, #3
 800201c:	f043 0302 	orr.w	r3, r3, #2
 8002020:	81a3      	strh	r3, [r4, #12]
 8002022:	e7e3      	b.n	8001fec <__smakebuf_r+0xc>
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <__smakebuf_r+0x7c>)
 8002026:	62b3      	str	r3, [r6, #40]	; 0x28
 8002028:	89a3      	ldrh	r3, [r4, #12]
 800202a:	6020      	str	r0, [r4, #0]
 800202c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002030:	81a3      	strh	r3, [r4, #12]
 8002032:	9b00      	ldr	r3, [sp, #0]
 8002034:	6163      	str	r3, [r4, #20]
 8002036:	9b01      	ldr	r3, [sp, #4]
 8002038:	6120      	str	r0, [r4, #16]
 800203a:	b15b      	cbz	r3, 8002054 <__smakebuf_r+0x74>
 800203c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002040:	4630      	mov	r0, r6
 8002042:	f000 f88d 	bl	8002160 <_isatty_r>
 8002046:	b128      	cbz	r0, 8002054 <__smakebuf_r+0x74>
 8002048:	89a3      	ldrh	r3, [r4, #12]
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	f043 0301 	orr.w	r3, r3, #1
 8002052:	81a3      	strh	r3, [r4, #12]
 8002054:	89a0      	ldrh	r0, [r4, #12]
 8002056:	4305      	orrs	r5, r0
 8002058:	81a5      	strh	r5, [r4, #12]
 800205a:	e7cd      	b.n	8001ff8 <__smakebuf_r+0x18>
 800205c:	0800134d 	.word	0x0800134d

08002060 <__malloc_lock>:
 8002060:	4801      	ldr	r0, [pc, #4]	; (8002068 <__malloc_lock+0x8>)
 8002062:	f7ff ba45 	b.w	80014f0 <__retarget_lock_acquire_recursive>
 8002066:	bf00      	nop
 8002068:	200000f0 	.word	0x200000f0

0800206c <__malloc_unlock>:
 800206c:	4801      	ldr	r0, [pc, #4]	; (8002074 <__malloc_unlock+0x8>)
 800206e:	f7ff ba40 	b.w	80014f2 <__retarget_lock_release_recursive>
 8002072:	bf00      	nop
 8002074:	200000f0 	.word	0x200000f0

08002078 <_free_r>:
 8002078:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800207a:	2900      	cmp	r1, #0
 800207c:	d048      	beq.n	8002110 <_free_r+0x98>
 800207e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002082:	9001      	str	r0, [sp, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	f1a1 0404 	sub.w	r4, r1, #4
 800208a:	bfb8      	it	lt
 800208c:	18e4      	addlt	r4, r4, r3
 800208e:	f7ff ffe7 	bl	8002060 <__malloc_lock>
 8002092:	4a20      	ldr	r2, [pc, #128]	; (8002114 <_free_r+0x9c>)
 8002094:	9801      	ldr	r0, [sp, #4]
 8002096:	6813      	ldr	r3, [r2, #0]
 8002098:	4615      	mov	r5, r2
 800209a:	b933      	cbnz	r3, 80020aa <_free_r+0x32>
 800209c:	6063      	str	r3, [r4, #4]
 800209e:	6014      	str	r4, [r2, #0]
 80020a0:	b003      	add	sp, #12
 80020a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020a6:	f7ff bfe1 	b.w	800206c <__malloc_unlock>
 80020aa:	42a3      	cmp	r3, r4
 80020ac:	d90b      	bls.n	80020c6 <_free_r+0x4e>
 80020ae:	6821      	ldr	r1, [r4, #0]
 80020b0:	1862      	adds	r2, r4, r1
 80020b2:	4293      	cmp	r3, r2
 80020b4:	bf04      	itt	eq
 80020b6:	681a      	ldreq	r2, [r3, #0]
 80020b8:	685b      	ldreq	r3, [r3, #4]
 80020ba:	6063      	str	r3, [r4, #4]
 80020bc:	bf04      	itt	eq
 80020be:	1852      	addeq	r2, r2, r1
 80020c0:	6022      	streq	r2, [r4, #0]
 80020c2:	602c      	str	r4, [r5, #0]
 80020c4:	e7ec      	b.n	80020a0 <_free_r+0x28>
 80020c6:	461a      	mov	r2, r3
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	b10b      	cbz	r3, 80020d0 <_free_r+0x58>
 80020cc:	42a3      	cmp	r3, r4
 80020ce:	d9fa      	bls.n	80020c6 <_free_r+0x4e>
 80020d0:	6811      	ldr	r1, [r2, #0]
 80020d2:	1855      	adds	r5, r2, r1
 80020d4:	42a5      	cmp	r5, r4
 80020d6:	d10b      	bne.n	80020f0 <_free_r+0x78>
 80020d8:	6824      	ldr	r4, [r4, #0]
 80020da:	4421      	add	r1, r4
 80020dc:	1854      	adds	r4, r2, r1
 80020de:	42a3      	cmp	r3, r4
 80020e0:	6011      	str	r1, [r2, #0]
 80020e2:	d1dd      	bne.n	80020a0 <_free_r+0x28>
 80020e4:	681c      	ldr	r4, [r3, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	6053      	str	r3, [r2, #4]
 80020ea:	4421      	add	r1, r4
 80020ec:	6011      	str	r1, [r2, #0]
 80020ee:	e7d7      	b.n	80020a0 <_free_r+0x28>
 80020f0:	d902      	bls.n	80020f8 <_free_r+0x80>
 80020f2:	230c      	movs	r3, #12
 80020f4:	6003      	str	r3, [r0, #0]
 80020f6:	e7d3      	b.n	80020a0 <_free_r+0x28>
 80020f8:	6825      	ldr	r5, [r4, #0]
 80020fa:	1961      	adds	r1, r4, r5
 80020fc:	428b      	cmp	r3, r1
 80020fe:	bf04      	itt	eq
 8002100:	6819      	ldreq	r1, [r3, #0]
 8002102:	685b      	ldreq	r3, [r3, #4]
 8002104:	6063      	str	r3, [r4, #4]
 8002106:	bf04      	itt	eq
 8002108:	1949      	addeq	r1, r1, r5
 800210a:	6021      	streq	r1, [r4, #0]
 800210c:	6054      	str	r4, [r2, #4]
 800210e:	e7c7      	b.n	80020a0 <_free_r+0x28>
 8002110:	b003      	add	sp, #12
 8002112:	bd30      	pop	{r4, r5, pc}
 8002114:	2000009c 	.word	0x2000009c

08002118 <_read_r>:
 8002118:	b538      	push	{r3, r4, r5, lr}
 800211a:	4d07      	ldr	r5, [pc, #28]	; (8002138 <_read_r+0x20>)
 800211c:	4604      	mov	r4, r0
 800211e:	4608      	mov	r0, r1
 8002120:	4611      	mov	r1, r2
 8002122:	2200      	movs	r2, #0
 8002124:	602a      	str	r2, [r5, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f7ff f895 	bl	8001256 <_read>
 800212c:	1c43      	adds	r3, r0, #1
 800212e:	d102      	bne.n	8002136 <_read_r+0x1e>
 8002130:	682b      	ldr	r3, [r5, #0]
 8002132:	b103      	cbz	r3, 8002136 <_read_r+0x1e>
 8002134:	6023      	str	r3, [r4, #0]
 8002136:	bd38      	pop	{r3, r4, r5, pc}
 8002138:	200000f8 	.word	0x200000f8

0800213c <_fstat_r>:
 800213c:	b538      	push	{r3, r4, r5, lr}
 800213e:	4d07      	ldr	r5, [pc, #28]	; (800215c <_fstat_r+0x20>)
 8002140:	2300      	movs	r3, #0
 8002142:	4604      	mov	r4, r0
 8002144:	4608      	mov	r0, r1
 8002146:	4611      	mov	r1, r2
 8002148:	602b      	str	r3, [r5, #0]
 800214a:	f7ff f87b 	bl	8001244 <_fstat>
 800214e:	1c43      	adds	r3, r0, #1
 8002150:	d102      	bne.n	8002158 <_fstat_r+0x1c>
 8002152:	682b      	ldr	r3, [r5, #0]
 8002154:	b103      	cbz	r3, 8002158 <_fstat_r+0x1c>
 8002156:	6023      	str	r3, [r4, #0]
 8002158:	bd38      	pop	{r3, r4, r5, pc}
 800215a:	bf00      	nop
 800215c:	200000f8 	.word	0x200000f8

08002160 <_isatty_r>:
 8002160:	b538      	push	{r3, r4, r5, lr}
 8002162:	4d06      	ldr	r5, [pc, #24]	; (800217c <_isatty_r+0x1c>)
 8002164:	2300      	movs	r3, #0
 8002166:	4604      	mov	r4, r0
 8002168:	4608      	mov	r0, r1
 800216a:	602b      	str	r3, [r5, #0]
 800216c:	f7ff f86f 	bl	800124e <_isatty>
 8002170:	1c43      	adds	r3, r0, #1
 8002172:	d102      	bne.n	800217a <_isatty_r+0x1a>
 8002174:	682b      	ldr	r3, [r5, #0]
 8002176:	b103      	cbz	r3, 800217a <_isatty_r+0x1a>
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	bd38      	pop	{r3, r4, r5, pc}
 800217c:	200000f8 	.word	0x200000f8

08002180 <_init>:
 8002180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002182:	bf00      	nop
 8002184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002186:	bc08      	pop	{r3}
 8002188:	469e      	mov	lr, r3
 800218a:	4770      	bx	lr

0800218c <_fini>:
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800218e:	bf00      	nop
 8002190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002192:	bc08      	pop	{r3}
 8002194:	469e      	mov	lr, r3
 8002196:	4770      	bx	lr
