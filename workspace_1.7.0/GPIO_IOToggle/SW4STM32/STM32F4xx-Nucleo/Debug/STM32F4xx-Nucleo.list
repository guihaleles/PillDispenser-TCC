
STM32F4xx-Nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d20  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000eb4  08000eb4  00010eb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08000ecc  08000ecc  00010ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08000ed8  08000ed8  00010ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08000edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000034  2000000c  08000ee8  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000040  08000ee8  00020040  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00003f8d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000100b  00000000  00000000  00023fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    000010b6  00000000  00000000  00024fd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000328  00000000  00000000  00026090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 00000430  00000000  00000000  000263b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00000f67  00000000  00000000  000267e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00004c95  00000000  00000000  0002774f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008af9b  00000000  00000000  0002c3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000053  00000000  00000000  000b737f  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000006e8  00000000  00000000  000b73d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000e9c 	.word	0x08000e9c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08000e9c 	.word	0x08000e9c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004cc:	490f      	ldr	r1, [pc, #60]	; (800050c <SystemInit+0x40>)
 80004ce:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80004da:	4b0d      	ldr	r3, [pc, #52]	; (8000510 <SystemInit+0x44>)
 80004dc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004de:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80004e0:	f042 0201 	orr.w	r2, r2, #1
 80004e4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80004e6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80004ee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80004f2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <SystemInit+0x48>)
 80004f6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004fe:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000500:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000502:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000506:	608b      	str	r3, [r1, #8]
#endif
}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00
 8000510:	40023800 	.word	0x40023800
 8000514:	24003010 	.word	0x24003010

08000518 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8000518:	4770      	bx	lr
	...

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b570      	push	{r4, r5, r6, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800051e:	4a0e      	ldr	r2, [pc, #56]	; (8000558 <HAL_InitTick+0x3c>)
 8000520:	4e0e      	ldr	r6, [pc, #56]	; (800055c <HAL_InitTick+0x40>)
{
 8000522:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000528:	7830      	ldrb	r0, [r6, #0]
 800052a:	fbb3 f3f0 	udiv	r3, r3, r0
 800052e:	6810      	ldr	r0, [r2, #0]
 8000530:	fbb0 f0f3 	udiv	r0, r0, r3
 8000534:	f000 f898 	bl	8000668 <HAL_SYSTICK_Config>
 8000538:	4604      	mov	r4, r0
 800053a:	b950      	cbnz	r0, 8000552 <HAL_InitTick+0x36>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800053c:	2d0f      	cmp	r5, #15
 800053e:	d808      	bhi.n	8000552 <HAL_InitTick+0x36>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000540:	4602      	mov	r2, r0
 8000542:	4629      	mov	r1, r5
 8000544:	f04f 30ff 	mov.w	r0, #4294967295
 8000548:	f000 f85c 	bl	8000604 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800054c:	6075      	str	r5, [r6, #4]
 800054e:	4620      	mov	r0, r4
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000550:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8000552:	2001      	movs	r0, #1
 8000554:	e7fc      	b.n	8000550 <HAL_InitTick+0x34>
 8000556:	bf00      	nop
 8000558:	20000000 	.word	0x20000000
 800055c:	20000004 	.word	0x20000004

08000560 <HAL_Init>:
{
 8000560:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <HAL_Init+0x30>)
 8000564:	681a      	ldr	r2, [r3, #0]
 8000566:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800056a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800056c:	681a      	ldr	r2, [r3, #0]
 800056e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000572:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000574:	681a      	ldr	r2, [r3, #0]
 8000576:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800057a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800057c:	2003      	movs	r0, #3
 800057e:	f000 f82f 	bl	80005e0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000582:	200f      	movs	r0, #15
 8000584:	f7ff ffca 	bl	800051c <HAL_InitTick>
  HAL_MspInit();
 8000588:	f7ff ffc6 	bl	8000518 <HAL_MspInit>
}
 800058c:	2000      	movs	r0, #0
 800058e:	bd08      	pop	{r3, pc}
 8000590:	40023c00 	.word	0x40023c00

08000594 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <HAL_IncTick+0x10>)
 8000596:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_IncTick+0x14>)
 8000598:	6811      	ldr	r1, [r2, #0]
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	440b      	add	r3, r1
 800059e:	6013      	str	r3, [r2, #0]
}
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop
 80005a4:	2000003c 	.word	0x2000003c
 80005a8:	20000004 	.word	0x20000004

080005ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80005ac:	4b01      	ldr	r3, [pc, #4]	; (80005b4 <HAL_GetTick+0x8>)
 80005ae:	6818      	ldr	r0, [r3, #0]
}
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	2000003c 	.word	0x2000003c

080005b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005b8:	b538      	push	{r3, r4, r5, lr}
 80005ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80005bc:	f7ff fff6 	bl	80005ac <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005c0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80005c2:	bf1c      	itt	ne
 80005c4:	4b05      	ldrne	r3, [pc, #20]	; (80005dc <HAL_Delay+0x24>)
 80005c6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80005c8:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80005ca:	bf18      	it	ne
 80005cc:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005ce:	f7ff ffed 	bl	80005ac <HAL_GetTick>
 80005d2:	1b43      	subs	r3, r0, r5
 80005d4:	42a3      	cmp	r3, r4
 80005d6:	d3fa      	bcc.n	80005ce <HAL_Delay+0x16>
  {
  }
}
 80005d8:	bd38      	pop	{r3, r4, r5, pc}
 80005da:	bf00      	nop
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005e0:	4907      	ldr	r1, [pc, #28]	; (8000600 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005e2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005e4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005e8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ea:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005f0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80005fc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000606:	b530      	push	{r4, r5, lr}
 8000608:	68dc      	ldr	r4, [r3, #12]
 800060a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800060e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000612:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000614:	2d04      	cmp	r5, #4
 8000616:	bf28      	it	cs
 8000618:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800061a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800061c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000620:	bf8c      	ite	hi
 8000622:	3c03      	subhi	r4, #3
 8000624:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000626:	fa03 f505 	lsl.w	r5, r3, r5
 800062a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800062e:	40a3      	lsls	r3, r4
 8000630:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000634:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8000636:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000638:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800063c:	bfac      	ite	ge
 800063e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000642:	4a08      	ldrlt	r2, [pc, #32]	; (8000664 <HAL_NVIC_SetPriority+0x60>)
 8000644:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000648:	bfb8      	it	lt
 800064a:	f000 000f 	andlt.w	r0, r0, #15
 800064e:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000650:	bfaa      	itet	ge
 8000652:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000656:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000658:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	bf00      	nop
 8000660:	e000ed00 	.word	0xe000ed00
 8000664:	e000ed14 	.word	0xe000ed14

08000668 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000668:	3801      	subs	r0, #1
 800066a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800066e:	d20a      	bcs.n	8000686 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000674:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000676:	21f0      	movs	r1, #240	; 0xf0
 8000678:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800067c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800067e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000682:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000684:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000686:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop
 800068c:	e000e010 	.word	0xe000e010
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000694:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000698:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8000820 <HAL_GPIO_Init+0x18c>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800069c:	4a5e      	ldr	r2, [pc, #376]	; (8000818 <HAL_GPIO_Init+0x184>)
  for(position = 0U; position < GPIO_NUMBER; position++)
 800069e:	2300      	movs	r3, #0
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a0:	680d      	ldr	r5, [r1, #0]
    ioposition = 0x01U << position;
 80006a2:	2401      	movs	r4, #1
 80006a4:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80006a6:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80006aa:	43ac      	bics	r4, r5
 80006ac:	f040 80a5 	bne.w	80007fa <HAL_GPIO_Init+0x166>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80006b0:	684d      	ldr	r5, [r1, #4]
 80006b2:	f005 0403 	and.w	r4, r5, #3
 80006b6:	ea4f 0843 	mov.w	r8, r3, lsl #1
 80006ba:	2603      	movs	r6, #3
 80006bc:	1e67      	subs	r7, r4, #1
 80006be:	fa06 f608 	lsl.w	r6, r6, r8
 80006c2:	2f01      	cmp	r7, #1
 80006c4:	ea6f 0606 	mvn.w	r6, r6
 80006c8:	d834      	bhi.n	8000734 <HAL_GPIO_Init+0xa0>
        temp = GPIOx->OSPEEDR; 
 80006ca:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80006cc:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80006d0:	68cf      	ldr	r7, [r1, #12]
 80006d2:	fa07 f708 	lsl.w	r7, r7, r8
 80006d6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 80006da:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80006dc:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80006de:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80006e2:	f3c5 1700 	ubfx	r7, r5, #4, #1
 80006e6:	409f      	lsls	r7, r3
 80006e8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 80006ec:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80006ee:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80006f0:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80006f4:	688f      	ldr	r7, [r1, #8]
 80006f6:	fa07 f708 	lsl.w	r7, r7, r8
 80006fa:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80006fe:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8000700:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000702:	d119      	bne.n	8000738 <HAL_GPIO_Init+0xa4>
        temp = GPIOx->AFR[position >> 3U];
 8000704:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000708:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800070c:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000710:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000714:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000718:	f04f 0e0f 	mov.w	lr, #15
 800071c:	fa0e fe0b 	lsl.w	lr, lr, fp
 8000720:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000724:	690f      	ldr	r7, [r1, #16]
 8000726:	fa07 f70b 	lsl.w	r7, r7, fp
 800072a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 800072e:	f8ca 7020 	str.w	r7, [sl, #32]
 8000732:	e001      	b.n	8000738 <HAL_GPIO_Init+0xa4>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000734:	2c03      	cmp	r4, #3
 8000736:	d1da      	bne.n	80006ee <HAL_GPIO_Init+0x5a>
      temp = GPIOx->MODER;
 8000738:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800073a:	fa04 f408 	lsl.w	r4, r4, r8
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800073e:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000740:	4326      	orrs	r6, r4
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000742:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 8000746:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000748:	d057      	beq.n	80007fa <HAL_GPIO_Init+0x166>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800074a:	f04f 0a00 	mov.w	sl, #0
 800074e:	f8cd a004 	str.w	sl, [sp, #4]
 8000752:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000756:	4c31      	ldr	r4, [pc, #196]	; (800081c <HAL_GPIO_Init+0x188>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000758:	f446 4680 	orr.w	r6, r6, #16384	; 0x4000
 800075c:	f8c9 6044 	str.w	r6, [r9, #68]	; 0x44
 8000760:	f8d9 6044 	ldr.w	r6, [r9, #68]	; 0x44
 8000764:	f406 4680 	and.w	r6, r6, #16384	; 0x4000
 8000768:	9601      	str	r6, [sp, #4]
 800076a:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 800076c:	f023 0603 	bic.w	r6, r3, #3
 8000770:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8000774:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000778:	f003 0e03 	and.w	lr, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800077c:	f8d6 8008 	ldr.w	r8, [r6, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000780:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000784:	270f      	movs	r7, #15
 8000786:	fa07 f70e 	lsl.w	r7, r7, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800078a:	42a0      	cmp	r0, r4
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800078c:	ea28 0707 	bic.w	r7, r8, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000790:	d03a      	beq.n	8000808 <HAL_GPIO_Init+0x174>
 8000792:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000796:	42a0      	cmp	r0, r4
 8000798:	d038      	beq.n	800080c <HAL_GPIO_Init+0x178>
 800079a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800079e:	42a0      	cmp	r0, r4
 80007a0:	d036      	beq.n	8000810 <HAL_GPIO_Init+0x17c>
 80007a2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007a6:	42a0      	cmp	r0, r4
 80007a8:	d034      	beq.n	8000814 <HAL_GPIO_Init+0x180>
 80007aa:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80007ae:	42a0      	cmp	r0, r4
 80007b0:	bf0c      	ite	eq
 80007b2:	2404      	moveq	r4, #4
 80007b4:	2407      	movne	r4, #7
 80007b6:	fa04 f40e 	lsl.w	r4, r4, lr
 80007ba:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80007bc:	60b4      	str	r4, [r6, #8]
        temp = EXTI->IMR;
 80007be:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80007c0:	ea6f 060c 	mvn.w	r6, ip
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80007c4:	03ef      	lsls	r7, r5, #15
        temp &= ~((uint32_t)iocurrent);
 80007c6:	bf54      	ite	pl
 80007c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007ca:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 80007ce:	6014      	str	r4, [r2, #0]

        temp = EXTI->EMR;
 80007d0:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80007d2:	03af      	lsls	r7, r5, #14
        temp &= ~((uint32_t)iocurrent);
 80007d4:	bf54      	ite	pl
 80007d6:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007d8:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->EMR = temp;
 80007dc:	6054      	str	r4, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80007de:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80007e0:	02ef      	lsls	r7, r5, #11
        temp &= ~((uint32_t)iocurrent);
 80007e2:	bf54      	ite	pl
 80007e4:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007e6:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;
 80007ea:	6094      	str	r4, [r2, #8]

        temp = EXTI->FTSR;
 80007ec:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80007ee:	02ad      	lsls	r5, r5, #10
        temp &= ~((uint32_t)iocurrent);
 80007f0:	bf54      	ite	pl
 80007f2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80007f4:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;
 80007f8:	60d4      	str	r4, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007fa:	3301      	adds	r3, #1
 80007fc:	2b10      	cmp	r3, #16
 80007fe:	f47f af4f 	bne.w	80006a0 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8000802:	b003      	add	sp, #12
 8000804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000808:	4654      	mov	r4, sl
 800080a:	e7d4      	b.n	80007b6 <HAL_GPIO_Init+0x122>
 800080c:	2401      	movs	r4, #1
 800080e:	e7d2      	b.n	80007b6 <HAL_GPIO_Init+0x122>
 8000810:	2402      	movs	r4, #2
 8000812:	e7d0      	b.n	80007b6 <HAL_GPIO_Init+0x122>
 8000814:	2403      	movs	r4, #3
 8000816:	e7ce      	b.n	80007b6 <HAL_GPIO_Init+0x122>
 8000818:	40013c00 	.word	0x40013c00
 800081c:	40020000 	.word	0x40020000
 8000820:	40023800 	.word	0x40023800

08000824 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000824:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000826:	ea01 0203 	and.w	r2, r1, r3
 800082a:	ea21 0103 	bic.w	r1, r1, r3
 800082e:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8000832:	6181      	str	r1, [r0, #24]
}
 8000834:	4770      	bx	lr
	...

08000838 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800083c:	4604      	mov	r4, r0
 800083e:	b340      	cbz	r0, 8000892 <HAL_RCC_OscConfig+0x5a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000840:	6803      	ldr	r3, [r0, #0]
 8000842:	07dd      	lsls	r5, r3, #31
 8000844:	d410      	bmi.n	8000868 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000846:	6823      	ldr	r3, [r4, #0]
 8000848:	0798      	lsls	r0, r3, #30
 800084a:	d45e      	bmi.n	800090a <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800084c:	6823      	ldr	r3, [r4, #0]
 800084e:	071a      	lsls	r2, r3, #28
 8000850:	f100 80a0 	bmi.w	8000994 <HAL_RCC_OscConfig+0x15c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000854:	6823      	ldr	r3, [r4, #0]
 8000856:	075b      	lsls	r3, r3, #29
 8000858:	f100 80be 	bmi.w	80009d8 <HAL_RCC_OscConfig+0x1a0>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800085c:	69a0      	ldr	r0, [r4, #24]
 800085e:	2800      	cmp	r0, #0
 8000860:	f040 811f 	bne.w	8000aa2 <HAL_RCC_OscConfig+0x26a>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8000864:	2000      	movs	r0, #0
 8000866:	e02b      	b.n	80008c0 <HAL_RCC_OscConfig+0x88>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000868:	4ba6      	ldr	r3, [pc, #664]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 800086a:	689a      	ldr	r2, [r3, #8]
 800086c:	f002 020c 	and.w	r2, r2, #12
 8000870:	2a04      	cmp	r2, #4
 8000872:	d007      	beq.n	8000884 <HAL_RCC_OscConfig+0x4c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000874:	689a      	ldr	r2, [r3, #8]
 8000876:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800087a:	2a08      	cmp	r2, #8
 800087c:	d10b      	bne.n	8000896 <HAL_RCC_OscConfig+0x5e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800087e:	685a      	ldr	r2, [r3, #4]
 8000880:	0251      	lsls	r1, r2, #9
 8000882:	d508      	bpl.n	8000896 <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000884:	4b9f      	ldr	r3, [pc, #636]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	039a      	lsls	r2, r3, #14
 800088a:	d5dc      	bpl.n	8000846 <HAL_RCC_OscConfig+0xe>
 800088c:	6863      	ldr	r3, [r4, #4]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d1d9      	bne.n	8000846 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 8000892:	2001      	movs	r0, #1
 8000894:	e014      	b.n	80008c0 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000896:	6862      	ldr	r2, [r4, #4]
 8000898:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800089c:	d113      	bne.n	80008c6 <HAL_RCC_OscConfig+0x8e>
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80008a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008a6:	f7ff fe81 	bl	80005ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008aa:	4e96      	ldr	r6, [pc, #600]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 80008ac:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80008ae:	6833      	ldr	r3, [r6, #0]
 80008b0:	039b      	lsls	r3, r3, #14
 80008b2:	d4c8      	bmi.n	8000846 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008b4:	f7ff fe7a 	bl	80005ac <HAL_GetTick>
 80008b8:	1b40      	subs	r0, r0, r5
 80008ba:	2864      	cmp	r0, #100	; 0x64
 80008bc:	d9f7      	bls.n	80008ae <HAL_RCC_OscConfig+0x76>
            return HAL_TIMEOUT;
 80008be:	2003      	movs	r0, #3
}
 80008c0:	b002      	add	sp, #8
 80008c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008c6:	4d8f      	ldr	r5, [pc, #572]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 80008c8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80008cc:	682b      	ldr	r3, [r5, #0]
 80008ce:	d107      	bne.n	80008e0 <HAL_RCC_OscConfig+0xa8>
 80008d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008d4:	602b      	str	r3, [r5, #0]
 80008d6:	682b      	ldr	r3, [r5, #0]
 80008d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008dc:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008de:	e7e2      	b.n	80008a6 <HAL_RCC_OscConfig+0x6e>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80008e4:	602b      	str	r3, [r5, #0]
 80008e6:	682b      	ldr	r3, [r5, #0]
 80008e8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80008ec:	602b      	str	r3, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80008ee:	2a00      	cmp	r2, #0
 80008f0:	d1d9      	bne.n	80008a6 <HAL_RCC_OscConfig+0x6e>
        tickstart = HAL_GetTick();
 80008f2:	f7ff fe5b 	bl	80005ac <HAL_GetTick>
 80008f6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80008f8:	682b      	ldr	r3, [r5, #0]
 80008fa:	039f      	lsls	r7, r3, #14
 80008fc:	d5a3      	bpl.n	8000846 <HAL_RCC_OscConfig+0xe>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80008fe:	f7ff fe55 	bl	80005ac <HAL_GetTick>
 8000902:	1b80      	subs	r0, r0, r6
 8000904:	2864      	cmp	r0, #100	; 0x64
 8000906:	d9f7      	bls.n	80008f8 <HAL_RCC_OscConfig+0xc0>
 8000908:	e7d9      	b.n	80008be <HAL_RCC_OscConfig+0x86>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800090a:	4b7e      	ldr	r3, [pc, #504]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 800090c:	689a      	ldr	r2, [r3, #8]
 800090e:	f012 0f0c 	tst.w	r2, #12
 8000912:	d007      	beq.n	8000924 <HAL_RCC_OscConfig+0xec>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000914:	689a      	ldr	r2, [r3, #8]
 8000916:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800091a:	2a08      	cmp	r2, #8
 800091c:	d111      	bne.n	8000942 <HAL_RCC_OscConfig+0x10a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	025e      	lsls	r6, r3, #9
 8000922:	d40e      	bmi.n	8000942 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000924:	4b77      	ldr	r3, [pc, #476]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	0795      	lsls	r5, r2, #30
 800092a:	d502      	bpl.n	8000932 <HAL_RCC_OscConfig+0xfa>
 800092c:	68e2      	ldr	r2, [r4, #12]
 800092e:	2a01      	cmp	r2, #1
 8000930:	d1af      	bne.n	8000892 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	6921      	ldr	r1, [r4, #16]
 8000936:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800093a:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800093e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000940:	e784      	b.n	800084c <HAL_RCC_OscConfig+0x14>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000942:	68e2      	ldr	r2, [r4, #12]
 8000944:	4b70      	ldr	r3, [pc, #448]	; (8000b08 <HAL_RCC_OscConfig+0x2d0>)
 8000946:	b1b2      	cbz	r2, 8000976 <HAL_RCC_OscConfig+0x13e>
        __HAL_RCC_HSI_ENABLE();
 8000948:	2201      	movs	r2, #1
 800094a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800094c:	f7ff fe2e 	bl	80005ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000950:	4d6c      	ldr	r5, [pc, #432]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000952:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000954:	682b      	ldr	r3, [r5, #0]
 8000956:	0798      	lsls	r0, r3, #30
 8000958:	d507      	bpl.n	800096a <HAL_RCC_OscConfig+0x132>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800095a:	682b      	ldr	r3, [r5, #0]
 800095c:	6922      	ldr	r2, [r4, #16]
 800095e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000962:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000966:	602b      	str	r3, [r5, #0]
 8000968:	e770      	b.n	800084c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800096a:	f7ff fe1f 	bl	80005ac <HAL_GetTick>
 800096e:	1b80      	subs	r0, r0, r6
 8000970:	2802      	cmp	r0, #2
 8000972:	d9ef      	bls.n	8000954 <HAL_RCC_OscConfig+0x11c>
 8000974:	e7a3      	b.n	80008be <HAL_RCC_OscConfig+0x86>
        __HAL_RCC_HSI_DISABLE();
 8000976:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000978:	f7ff fe18 	bl	80005ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800097c:	4e61      	ldr	r6, [pc, #388]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 800097e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000980:	6833      	ldr	r3, [r6, #0]
 8000982:	0799      	lsls	r1, r3, #30
 8000984:	f57f af62 	bpl.w	800084c <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000988:	f7ff fe10 	bl	80005ac <HAL_GetTick>
 800098c:	1b40      	subs	r0, r0, r5
 800098e:	2802      	cmp	r0, #2
 8000990:	d9f6      	bls.n	8000980 <HAL_RCC_OscConfig+0x148>
 8000992:	e794      	b.n	80008be <HAL_RCC_OscConfig+0x86>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000994:	6962      	ldr	r2, [r4, #20]
 8000996:	4b5d      	ldr	r3, [pc, #372]	; (8000b0c <HAL_RCC_OscConfig+0x2d4>)
 8000998:	b17a      	cbz	r2, 80009ba <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_ENABLE();
 800099a:	2201      	movs	r2, #1
 800099c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800099e:	f7ff fe05 	bl	80005ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a2:	4e58      	ldr	r6, [pc, #352]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80009a4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80009a6:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80009a8:	079f      	lsls	r7, r3, #30
 80009aa:	f53f af53 	bmi.w	8000854 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009ae:	f7ff fdfd 	bl	80005ac <HAL_GetTick>
 80009b2:	1b40      	subs	r0, r0, r5
 80009b4:	2802      	cmp	r0, #2
 80009b6:	d9f6      	bls.n	80009a6 <HAL_RCC_OscConfig+0x16e>
 80009b8:	e781      	b.n	80008be <HAL_RCC_OscConfig+0x86>
      __HAL_RCC_LSI_DISABLE();
 80009ba:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80009bc:	f7ff fdf6 	bl	80005ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c0:	4e50      	ldr	r6, [pc, #320]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 80009c2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80009c4:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80009c6:	0798      	lsls	r0, r3, #30
 80009c8:	f57f af44 	bpl.w	8000854 <HAL_RCC_OscConfig+0x1c>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80009cc:	f7ff fdee 	bl	80005ac <HAL_GetTick>
 80009d0:	1b40      	subs	r0, r0, r5
 80009d2:	2802      	cmp	r0, #2
 80009d4:	d9f6      	bls.n	80009c4 <HAL_RCC_OscConfig+0x18c>
 80009d6:	e772      	b.n	80008be <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 80009da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009dc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80009e0:	d128      	bne.n	8000a34 <HAL_RCC_OscConfig+0x1fc>
      __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	9201      	str	r2, [sp, #4]
 80009e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ea:	641a      	str	r2, [r3, #64]	; 0x40
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f2:	9301      	str	r3, [sp, #4]
 80009f4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80009f6:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009f8:	4d45      	ldr	r5, [pc, #276]	; (8000b10 <HAL_RCC_OscConfig+0x2d8>)
 80009fa:	682b      	ldr	r3, [r5, #0]
 80009fc:	05d9      	lsls	r1, r3, #23
 80009fe:	d51b      	bpl.n	8000a38 <HAL_RCC_OscConfig+0x200>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a00:	68a3      	ldr	r3, [r4, #8]
 8000a02:	4d40      	ldr	r5, [pc, #256]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d127      	bne.n	8000a58 <HAL_RCC_OscConfig+0x220>
 8000a08:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a0a:	f043 0301 	orr.w	r3, r3, #1
 8000a0e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8000a10:	f7ff fdcc 	bl	80005ac <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a14:	4e3b      	ldr	r6, [pc, #236]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
      tickstart = HAL_GetTick();
 8000a16:	4605      	mov	r5, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a18:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a1c:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8000a1e:	079b      	lsls	r3, r3, #30
 8000a20:	d539      	bpl.n	8000a96 <HAL_RCC_OscConfig+0x25e>
    if(pwrclkchanged == SET)
 8000a22:	2f00      	cmp	r7, #0
 8000a24:	f43f af1a 	beq.w	800085c <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a28:	4a36      	ldr	r2, [pc, #216]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 8000a2a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8000a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000a30:	6413      	str	r3, [r2, #64]	; 0x40
 8000a32:	e713      	b.n	800085c <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8000a34:	2700      	movs	r7, #0
 8000a36:	e7df      	b.n	80009f8 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a3e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8000a40:	f7ff fdb4 	bl	80005ac <HAL_GetTick>
 8000a44:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000a46:	682b      	ldr	r3, [r5, #0]
 8000a48:	05da      	lsls	r2, r3, #23
 8000a4a:	d4d9      	bmi.n	8000a00 <HAL_RCC_OscConfig+0x1c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000a4c:	f7ff fdae 	bl	80005ac <HAL_GetTick>
 8000a50:	1b80      	subs	r0, r0, r6
 8000a52:	2802      	cmp	r0, #2
 8000a54:	d9f7      	bls.n	8000a46 <HAL_RCC_OscConfig+0x20e>
 8000a56:	e732      	b.n	80008be <HAL_RCC_OscConfig+0x86>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d104      	bne.n	8000a66 <HAL_RCC_OscConfig+0x22e>
 8000a5c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a5e:	f043 0304 	orr.w	r3, r3, #4
 8000a62:	672b      	str	r3, [r5, #112]	; 0x70
 8000a64:	e7d0      	b.n	8000a08 <HAL_RCC_OscConfig+0x1d0>
 8000a66:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a68:	f022 0201 	bic.w	r2, r2, #1
 8000a6c:	672a      	str	r2, [r5, #112]	; 0x70
 8000a6e:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8000a70:	f022 0204 	bic.w	r2, r2, #4
 8000a74:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d1ca      	bne.n	8000a10 <HAL_RCC_OscConfig+0x1d8>
      tickstart = HAL_GetTick();
 8000a7a:	f7ff fd97 	bl	80005ac <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a7e:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000a82:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a84:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8000a86:	0798      	lsls	r0, r3, #30
 8000a88:	d5cb      	bpl.n	8000a22 <HAL_RCC_OscConfig+0x1ea>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8a:	f7ff fd8f 	bl	80005ac <HAL_GetTick>
 8000a8e:	1b80      	subs	r0, r0, r6
 8000a90:	4540      	cmp	r0, r8
 8000a92:	d9f7      	bls.n	8000a84 <HAL_RCC_OscConfig+0x24c>
 8000a94:	e713      	b.n	80008be <HAL_RCC_OscConfig+0x86>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a96:	f7ff fd89 	bl	80005ac <HAL_GetTick>
 8000a9a:	1b40      	subs	r0, r0, r5
 8000a9c:	4540      	cmp	r0, r8
 8000a9e:	d9bd      	bls.n	8000a1c <HAL_RCC_OscConfig+0x1e4>
 8000aa0:	e70d      	b.n	80008be <HAL_RCC_OscConfig+0x86>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000aa2:	4d18      	ldr	r5, [pc, #96]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
 8000aa4:	68ab      	ldr	r3, [r5, #8]
 8000aa6:	f003 030c 	and.w	r3, r3, #12
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	d047      	beq.n	8000b3e <HAL_RCC_OscConfig+0x306>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000aae:	4e19      	ldr	r6, [pc, #100]	; (8000b14 <HAL_RCC_OscConfig+0x2dc>)
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8000ab4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ab6:	d135      	bne.n	8000b24 <HAL_RCC_OscConfig+0x2ec>
        tickstart = HAL_GetTick();
 8000ab8:	f7ff fd78 	bl	80005ac <HAL_GetTick>
 8000abc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000abe:	682b      	ldr	r3, [r5, #0]
 8000ac0:	0199      	lsls	r1, r3, #6
 8000ac2:	d429      	bmi.n	8000b18 <HAL_RCC_OscConfig+0x2e0>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ac4:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000acc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8000ad0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000ad2:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8000ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000ad8:	0852      	lsrs	r2, r2, #1
 8000ada:	3a01      	subs	r2, #1
 8000adc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ae0:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000ae6:	f7ff fd61 	bl	80005ac <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aea:	4d06      	ldr	r5, [pc, #24]	; (8000b04 <HAL_RCC_OscConfig+0x2cc>)
        tickstart = HAL_GetTick();
 8000aec:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000aee:	682b      	ldr	r3, [r5, #0]
 8000af0:	019a      	lsls	r2, r3, #6
 8000af2:	f53f aeb7 	bmi.w	8000864 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000af6:	f7ff fd59 	bl	80005ac <HAL_GetTick>
 8000afa:	1b00      	subs	r0, r0, r4
 8000afc:	2802      	cmp	r0, #2
 8000afe:	d9f6      	bls.n	8000aee <HAL_RCC_OscConfig+0x2b6>
 8000b00:	e6dd      	b.n	80008be <HAL_RCC_OscConfig+0x86>
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	42470000 	.word	0x42470000
 8000b0c:	42470e80 	.word	0x42470e80
 8000b10:	40007000 	.word	0x40007000
 8000b14:	42470060 	.word	0x42470060
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b18:	f7ff fd48 	bl	80005ac <HAL_GetTick>
 8000b1c:	1bc0      	subs	r0, r0, r7
 8000b1e:	2802      	cmp	r0, #2
 8000b20:	d9cd      	bls.n	8000abe <HAL_RCC_OscConfig+0x286>
 8000b22:	e6cc      	b.n	80008be <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000b24:	f7ff fd42 	bl	80005ac <HAL_GetTick>
 8000b28:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000b2a:	682b      	ldr	r3, [r5, #0]
 8000b2c:	019b      	lsls	r3, r3, #6
 8000b2e:	f57f ae99 	bpl.w	8000864 <HAL_RCC_OscConfig+0x2c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b32:	f7ff fd3b 	bl	80005ac <HAL_GetTick>
 8000b36:	1b00      	subs	r0, r0, r4
 8000b38:	2802      	cmp	r0, #2
 8000b3a:	d9f6      	bls.n	8000b2a <HAL_RCC_OscConfig+0x2f2>
 8000b3c:	e6bf      	b.n	80008be <HAL_RCC_OscConfig+0x86>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000b3e:	2801      	cmp	r0, #1
 8000b40:	f43f aebe 	beq.w	80008c0 <HAL_RCC_OscConfig+0x88>
        pll_config = RCC->PLLCFGR;
 8000b44:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b46:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b48:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000b4c:	4291      	cmp	r1, r2
 8000b4e:	f47f aea0 	bne.w	8000892 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b52:	6a21      	ldr	r1, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000b58:	428a      	cmp	r2, r1
 8000b5a:	f47f ae9a 	bne.w	8000892 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b5e:	6a61      	ldr	r1, [r4, #36]	; 0x24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8000b60:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8000b64:	401a      	ands	r2, r3
 8000b66:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8000b6a:	f47f ae92 	bne.w	8000892 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b6e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000b70:	0852      	lsrs	r2, r2, #1
 8000b72:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8000b76:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8000b78:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8000b7c:	f47f ae89 	bne.w	8000892 <HAL_RCC_OscConfig+0x5a>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8000b80:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000b82:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8000b86:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8000b8a:	f43f ae6b 	beq.w	8000864 <HAL_RCC_OscConfig+0x2c>
 8000b8e:	e680      	b.n	8000892 <HAL_RCC_OscConfig+0x5a>

08000b90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b90:	4913      	ldr	r1, [pc, #76]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8000b92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b94:	688b      	ldr	r3, [r1, #8]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d01c      	beq.n	8000bd8 <HAL_RCC_GetSysClockFreq+0x48>
 8000b9e:	2b08      	cmp	r3, #8
 8000ba0:	d11c      	bne.n	8000bdc <HAL_RCC_GetSysClockFreq+0x4c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bac:	bf14      	ite	ne
 8000bae:	480d      	ldrne	r0, [pc, #52]	; (8000be4 <HAL_RCC_GetSysClockFreq+0x54>)
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb0:	480d      	ldreq	r0, [pc, #52]	; (8000be8 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bb2:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8000bb6:	bf18      	it	ne
 8000bb8:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000bba:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8000bbe:	fba1 0100 	umull	r0, r1, r1, r0
 8000bc2:	f7ff fb07 	bl	80001d4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8000bc6:	4b06      	ldr	r3, [pc, #24]	; (8000be0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8000bce:	3301      	adds	r3, #1
 8000bd0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8000bd2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000bd6:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000bd8:	4802      	ldr	r0, [pc, #8]	; (8000be4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000bda:	e7fc      	b.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x46>
      sysclockfreq = HSI_VALUE;
 8000bdc:	4802      	ldr	r0, [pc, #8]	; (8000be8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8000bde:	e7fa      	b.n	8000bd6 <HAL_RCC_GetSysClockFreq+0x46>
 8000be0:	40023800 	.word	0x40023800
 8000be4:	007a1200 	.word	0x007a1200
 8000be8:	00f42400 	.word	0x00f42400

08000bec <HAL_RCC_ClockConfig>:
{
 8000bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000bf0:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000bf2:	4604      	mov	r4, r0
 8000bf4:	b910      	cbnz	r0, 8000bfc <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000bf6:	2001      	movs	r0, #1
}
 8000bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000bfc:	4b44      	ldr	r3, [pc, #272]	; (8000d10 <HAL_RCC_ClockConfig+0x124>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	f002 0207 	and.w	r2, r2, #7
 8000c04:	428a      	cmp	r2, r1
 8000c06:	d328      	bcc.n	8000c5a <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c08:	6822      	ldr	r2, [r4, #0]
 8000c0a:	0797      	lsls	r7, r2, #30
 8000c0c:	d42d      	bmi.n	8000c6a <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c0e:	07d0      	lsls	r0, r2, #31
 8000c10:	d441      	bmi.n	8000c96 <HAL_RCC_ClockConfig+0xaa>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000c12:	4b3f      	ldr	r3, [pc, #252]	; (8000d10 <HAL_RCC_ClockConfig+0x124>)
 8000c14:	681a      	ldr	r2, [r3, #0]
 8000c16:	f002 0207 	and.w	r2, r2, #7
 8000c1a:	42aa      	cmp	r2, r5
 8000c1c:	d866      	bhi.n	8000cec <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c1e:	6822      	ldr	r2, [r4, #0]
 8000c20:	0751      	lsls	r1, r2, #29
 8000c22:	d46c      	bmi.n	8000cfe <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c24:	0713      	lsls	r3, r2, #28
 8000c26:	d507      	bpl.n	8000c38 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c28:	4a3a      	ldr	r2, [pc, #232]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000c2a:	6921      	ldr	r1, [r4, #16]
 8000c2c:	6893      	ldr	r3, [r2, #8]
 8000c2e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000c32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c36:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000c38:	f7ff ffaa 	bl	8000b90 <HAL_RCC_GetSysClockFreq>
 8000c3c:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000c3e:	4a36      	ldr	r2, [pc, #216]	; (8000d18 <HAL_RCC_ClockConfig+0x12c>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000c46:	5cd3      	ldrb	r3, [r2, r3]
 8000c48:	40d8      	lsrs	r0, r3
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <HAL_RCC_ClockConfig+0x130>)
 8000c4c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8000c4e:	4b34      	ldr	r3, [pc, #208]	; (8000d20 <HAL_RCC_ClockConfig+0x134>)
 8000c50:	6818      	ldr	r0, [r3, #0]
 8000c52:	f7ff fc63 	bl	800051c <HAL_InitTick>
  return HAL_OK;
 8000c56:	2000      	movs	r0, #0
 8000c58:	e7ce      	b.n	8000bf8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c5a:	b2ca      	uxtb	r2, r1
 8000c5c:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d1c6      	bne.n	8000bf6 <HAL_RCC_ClockConfig+0xa>
 8000c68:	e7ce      	b.n	8000c08 <HAL_RCC_ClockConfig+0x1c>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c6a:	4b2a      	ldr	r3, [pc, #168]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000c6c:	f012 0f04 	tst.w	r2, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000c70:	bf1e      	ittt	ne
 8000c72:	6899      	ldrne	r1, [r3, #8]
 8000c74:	f441 51e0 	orrne.w	r1, r1, #7168	; 0x1c00
 8000c78:	6099      	strne	r1, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c7a:	0716      	lsls	r6, r2, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000c7c:	bf42      	ittt	mi
 8000c7e:	6899      	ldrmi	r1, [r3, #8]
 8000c80:	f441 4160 	orrmi.w	r1, r1, #57344	; 0xe000
 8000c84:	6099      	strmi	r1, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000c86:	4923      	ldr	r1, [pc, #140]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000c88:	68a0      	ldr	r0, [r4, #8]
 8000c8a:	688b      	ldr	r3, [r1, #8]
 8000c8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000c90:	4303      	orrs	r3, r0
 8000c92:	608b      	str	r3, [r1, #8]
 8000c94:	e7bb      	b.n	8000c0e <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000c96:	6862      	ldr	r2, [r4, #4]
 8000c98:	4b1e      	ldr	r3, [pc, #120]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000c9a:	2a01      	cmp	r2, #1
 8000c9c:	d11c      	bne.n	8000cd8 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ca4:	d0a7      	beq.n	8000bf6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ca6:	4e1b      	ldr	r6, [pc, #108]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000ca8:	68b3      	ldr	r3, [r6, #8]
 8000caa:	f023 0303 	bic.w	r3, r3, #3
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8000cb2:	f7ff fc7b 	bl	80005ac <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cb6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000cba:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000cbc:	68b3      	ldr	r3, [r6, #8]
 8000cbe:	6862      	ldr	r2, [r4, #4]
 8000cc0:	f003 030c 	and.w	r3, r3, #12
 8000cc4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000cc8:	d0a3      	beq.n	8000c12 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000cca:	f7ff fc6f 	bl	80005ac <HAL_GetTick>
 8000cce:	1bc0      	subs	r0, r0, r7
 8000cd0:	4540      	cmp	r0, r8
 8000cd2:	d9f3      	bls.n	8000cbc <HAL_RCC_ClockConfig+0xd0>
        return HAL_TIMEOUT;
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	e78f      	b.n	8000bf8 <HAL_RCC_ClockConfig+0xc>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cd8:	1e91      	subs	r1, r2, #2
 8000cda:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cdc:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8000cde:	d802      	bhi.n	8000ce6 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000ce0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000ce4:	e7de      	b.n	8000ca4 <HAL_RCC_ClockConfig+0xb8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ce6:	f013 0f02 	tst.w	r3, #2
 8000cea:	e7db      	b.n	8000ca4 <HAL_RCC_ClockConfig+0xb8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000cec:	b2ea      	uxtb	r2, r5
 8000cee:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	42ab      	cmp	r3, r5
 8000cf8:	f47f af7d 	bne.w	8000bf6 <HAL_RCC_ClockConfig+0xa>
 8000cfc:	e78f      	b.n	8000c1e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000cfe:	4905      	ldr	r1, [pc, #20]	; (8000d14 <HAL_RCC_ClockConfig+0x128>)
 8000d00:	68e0      	ldr	r0, [r4, #12]
 8000d02:	688b      	ldr	r3, [r1, #8]
 8000d04:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000d08:	4303      	orrs	r3, r0
 8000d0a:	608b      	str	r3, [r1, #8]
 8000d0c:	e78a      	b.n	8000c24 <HAL_RCC_ClockConfig+0x38>
 8000d0e:	bf00      	nop
 8000d10:	40023c00 	.word	0x40023c00
 8000d14:	40023800 	.word	0x40023800
 8000d18:	08000eb4 	.word	0x08000eb4
 8000d1c:	20000000 	.word	0x20000000
 8000d20:	20000008 	.word	0x20000008

08000d24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d5c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d28:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d2a:	e003      	b.n	8000d34 <LoopCopyDataInit>

08000d2c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000d2c:	4b0c      	ldr	r3, [pc, #48]	; (8000d60 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000d2e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000d30:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000d32:	3104      	adds	r1, #4

08000d34 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000d34:	480b      	ldr	r0, [pc, #44]	; (8000d64 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000d38:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000d3a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000d3c:	d3f6      	bcc.n	8000d2c <CopyDataInit>
  ldr  r2, =_sbss
 8000d3e:	4a0b      	ldr	r2, [pc, #44]	; (8000d6c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000d40:	e002      	b.n	8000d48 <LoopFillZerobss>

08000d42 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000d42:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000d44:	f842 3b04 	str.w	r3, [r2], #4

08000d48 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000d4a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000d4c:	d3f9      	bcc.n	8000d42 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d4e:	f7ff fbbd 	bl	80004cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d52:	f000 f87f 	bl	8000e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d56:	f000 f80f 	bl	8000d78 <main>
  bx  lr    
 8000d5a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000d5c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8000d60:	08000edc 	.word	0x08000edc
  ldr  r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000d68:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000d6c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000d70:	20000040 	.word	0x20000040

08000d74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d74:	e7fe      	b.n	8000d74 <ADC_IRQHandler>
	...

08000d78 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000d78:	b500      	push	{lr}
 8000d7a:	b095      	sub	sp, #84	; 0x54
       - Configure the Flash prefetch, instruction and Data caches
       - Configure the Systick to generate an interrupt each 1 msec
       - Set NVIC Group Priority to 4
       - Global MSP (MCU Support Package) initialization
     */
  HAL_Init();
 8000d7c:	f7ff fbf0 	bl	8000560 <HAL_Init>
{
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d80:	4c2b      	ldr	r4, [pc, #172]	; (8000e30 <main+0xb8>)
  
  /* The voltage scaling allows optimizing the power consumption when the device is 
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d82:	492c      	ldr	r1, [pc, #176]	; (8000e34 <main+0xbc>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2200      	movs	r2, #0
 8000d86:	9201      	str	r2, [sp, #4]
 8000d88:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d8e:	6423      	str	r3, [r4, #64]	; 0x40
 8000d90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d96:	9301      	str	r3, [sp, #4]
 8000d98:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000d9a:	9202      	str	r2, [sp, #8]
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000da2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da6:	600b      	str	r3, [r1, #0]
 8000da8:	680b      	ldr	r3, [r1, #0]
 8000daa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dae:	9302      	str	r3, [sp, #8]
  
  /* Enable HSI Oscillator and activate PLL with HSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db0:	2502      	movs	r5, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000db2:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000db4:	9508      	str	r5, [sp, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = 0x10;
 8000db6:	2310      	movs	r3, #16
 8000db8:	2601      	movs	r6, #1
 8000dba:	e9cd 630b 	strd	r6, r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dbe:	e9cd 520e 	strd	r5, r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dc2:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dc4:	f44f 72a8 	mov.w	r2, #336	; 0x150
 8000dc8:	2304      	movs	r3, #4
 8000dca:	e9cd 2311 	strd	r2, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dce:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000dd0:	2307      	movs	r3, #7
 8000dd2:	9313      	str	r3, [sp, #76]	; 0x4c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd4:	f7ff fd30 	bl	8000838 <HAL_RCC_OscConfig>
 8000dd8:	b100      	cbz	r0, 8000ddc <main+0x64>
  * @param  None
  * @retval None
  */
static void Error_Handler(void)
{
  while(1)
 8000dda:	e7fe      	b.n	8000dda <main+0x62>
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000ddc:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dde:	e9cd 3503 	strd	r3, r5, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;  
 8000de2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;  
 8000de6:	e9cd 3006 	strd	r3, r0, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dea:	9005      	str	r0, [sp, #20]
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dec:	4629      	mov	r1, r5
 8000dee:	a803      	add	r0, sp, #12
 8000df0:	f7ff fefc 	bl	8000bec <HAL_RCC_ClockConfig>
 8000df4:	b100      	cbz	r0, 8000df8 <main+0x80>
  while(1)
 8000df6:	e7fe      	b.n	8000df6 <main+0x7e>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df8:	9008      	str	r0, [sp, #32]
 8000dfa:	6b23      	ldr	r3, [r4, #48]	; 0x30
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000dfc:	490e      	ldr	r1, [pc, #56]	; (8000e38 <main+0xc0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000dfe:	480f      	ldr	r0, [pc, #60]	; (8000e3c <main+0xc4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6323      	str	r3, [r4, #48]	; 0x30
 8000e06:	6b23      	ldr	r3, [r4, #48]	; 0x30
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e08:	4c0c      	ldr	r4, [pc, #48]	; (8000e3c <main+0xc4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	9308      	str	r3, [sp, #32]
 8000e10:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e12:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	e9c1 3600 	strd	r3, r6, [r1]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000e18:	e9c1 6502 	strd	r6, r5, [r1, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct); 
 8000e1c:	f7ff fc3a 	bl	8000694 <HAL_GPIO_Init>
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000e20:	4620      	mov	r0, r4
 8000e22:	2120      	movs	r1, #32
 8000e24:	f7ff fcfe 	bl	8000824 <HAL_GPIO_TogglePin>
    HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	; 0x64
 8000e2a:	f7ff fbc5 	bl	80005b8 <HAL_Delay>
  while (1)
 8000e2e:	e7f7      	b.n	8000e20 <main+0xa8>
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000
 8000e38:	20000028 	.word	0x20000028
 8000e3c:	40020000 	.word	0x40020000

08000e40 <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 8000e40:	4770      	bx	lr

08000e42 <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000e42:	e7fe      	b.n	8000e42 <HardFault_Handler>

08000e44 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000e44:	e7fe      	b.n	8000e44 <MemManage_Handler>

08000e46 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000e46:	e7fe      	b.n	8000e46 <BusFault_Handler>

08000e48 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <UsageFault_Handler>

08000e4a <SVC_Handler>:
 8000e4a:	4770      	bx	lr

08000e4c <DebugMon_Handler>:
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:
 8000e4e:	4770      	bx	lr

08000e50 <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 8000e50:	f7ff bba0 	b.w	8000594 <HAL_IncTick>

08000e54 <__libc_init_array>:
 8000e54:	b570      	push	{r4, r5, r6, lr}
 8000e56:	4d0d      	ldr	r5, [pc, #52]	; (8000e8c <__libc_init_array+0x38>)
 8000e58:	4c0d      	ldr	r4, [pc, #52]	; (8000e90 <__libc_init_array+0x3c>)
 8000e5a:	1b64      	subs	r4, r4, r5
 8000e5c:	10a4      	asrs	r4, r4, #2
 8000e5e:	2600      	movs	r6, #0
 8000e60:	42a6      	cmp	r6, r4
 8000e62:	d109      	bne.n	8000e78 <__libc_init_array+0x24>
 8000e64:	4d0b      	ldr	r5, [pc, #44]	; (8000e94 <__libc_init_array+0x40>)
 8000e66:	4c0c      	ldr	r4, [pc, #48]	; (8000e98 <__libc_init_array+0x44>)
 8000e68:	f000 f818 	bl	8000e9c <_init>
 8000e6c:	1b64      	subs	r4, r4, r5
 8000e6e:	10a4      	asrs	r4, r4, #2
 8000e70:	2600      	movs	r6, #0
 8000e72:	42a6      	cmp	r6, r4
 8000e74:	d105      	bne.n	8000e82 <__libc_init_array+0x2e>
 8000e76:	bd70      	pop	{r4, r5, r6, pc}
 8000e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e7c:	4798      	blx	r3
 8000e7e:	3601      	adds	r6, #1
 8000e80:	e7ee      	b.n	8000e60 <__libc_init_array+0xc>
 8000e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e86:	4798      	blx	r3
 8000e88:	3601      	adds	r6, #1
 8000e8a:	e7f2      	b.n	8000e72 <__libc_init_array+0x1e>
 8000e8c:	08000ed4 	.word	0x08000ed4
 8000e90:	08000ed4 	.word	0x08000ed4
 8000e94:	08000ed4 	.word	0x08000ed4
 8000e98:	08000ed8 	.word	0x08000ed8

08000e9c <_init>:
 8000e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e9e:	bf00      	nop
 8000ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ea2:	bc08      	pop	{r3}
 8000ea4:	469e      	mov	lr, r3
 8000ea6:	4770      	bx	lr

08000ea8 <_fini>:
 8000ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eaa:	bf00      	nop
 8000eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eae:	bc08      	pop	{r3}
 8000eb0:	469e      	mov	lr, r3
 8000eb2:	4770      	bx	lr
